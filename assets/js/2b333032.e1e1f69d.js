"use strict";(self.webpackChunkany_doc=self.webpackChunkany_doc||[]).push([[5986],{33426:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return i},default:function(){return h},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return l}});var s=t(85893),r=t(11151);const o={},i="Solid \u7684 TypeScript \u6307\u5357",d={id:"codeing/solidjs/typescript-for-solid",title:"Solid \u7684 TypeScript \u6307\u5357",description:"\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u7814\u7a76 Typescript \u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u5b83\u6765\u6784\u5efa Solid\u3002\u5bf9\u4e8e\u4e0d\u719f\u6089 Typescript \u7684 Javascript \u5f00\u53d1\u4eba\u5458\u6765\u8bf4\uff0c\u8fd9\u90e8\u5206\u53ef\u80fd\u770b\u8d77\u6765\u6709\u70b9\u964c\u751f\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u5c3d\u6700\u5927\u52aa\u529b\u5c06\u5176\u5206\u89e3\u3002",source:"@site/docs/09-codeing/09-solidjs/04-typescript-for-solid.md",sourceDirName:"09-codeing/09-solidjs",slug:"/codeing/solidjs/typescript-for-solid",permalink:"/codeing/solidjs/typescript-for-solid",draft:!1,unlisted:!1,editUrl:"https://github.com/share121/share121.github.io/edit/main/docs/09-codeing/09-solidjs/04-typescript-for-solid.md",tags:[],version:"current",lastUpdatedBy:"share121",lastUpdatedAt:1700897425,formattedLastUpdatedAt:"2023\u5e7411\u670825\u65e5",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u5b9e\u4f53\u57fa\u5143",permalink:"/codeing/solidjs/solid-primitives"},next:{title:"\u57fa\u672c\u6982\u5ff5",permalink:"/codeing/cpp/basic-concepts/"}},c={},l=[{value:"\u914d\u7f6e Typescript",id:"\u914d\u7f6e-typescript",level:2},{value:"API Types API \u7c7b\u578b",id:"api-types-api-\u7c7b\u578b",level:2},{value:"Signals \u4fe1\u53f7",id:"signals-\u4fe1\u53f7",level:3},{value:"Defaults \u8fdd\u7ea6",id:"defaults-\u8fdd\u7ea6",level:5},{value:"Context \u4e0a\u4e0b\u6587",id:"context-\u4e0a\u4e0b\u6587",level:3},{value:"Component Types \u7ec4\u4ef6\u7c7b\u578b",id:"component-types-\u7ec4\u4ef6\u7c7b\u578b",level:2},{value:"Event Handlers \u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f",id:"event-handlers-\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f",level:2},{value:"The ref Attribute ref \u5c5e\u6027",id:"the-ref-attribute-ref-\u5c5e\u6027",level:2},{value:"Control Flow Narrowing \u63a7\u5236\u6d41\u7f29\u5c0f",id:"control-flow-narrowing-\u63a7\u5236\u6d41\u7f29\u5c0f",level:2},{value:"[Special JSX Attributes and Directives",id:"special-jsx-attributes-and-directives",level:2},{value:"on:___/oncapture:___",id:"on___oncapture___",level:3},{value:"prop:___/attr:___",id:"prop___attr___",level:3},{value:"use:___",id:"use___",level:3}];function a(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h5:"h5",li:"li",ol:"ol",p:"p",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"solid-\u7684-typescript-\u6307\u5357",children:"Solid \u7684 TypeScript \u6307\u5357"}),"\n",(0,s.jsx)(n.p,{children:"\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u7814\u7a76 Typescript \u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u5b83\u6765\u6784\u5efa Solid\u3002\u5bf9\u4e8e\u4e0d\u719f\u6089 Typescript \u7684 Javascript \u5f00\u53d1\u4eba\u5458\u6765\u8bf4\uff0c\u8fd9\u90e8\u5206\u53ef\u80fd\u770b\u8d77\u6765\u6709\u70b9\u964c\u751f\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u5c3d\u6700\u5927\u52aa\u529b\u5c06\u5176\u5206\u89e3\u3002"}),"\n",(0,s.jsx)(n.p,{children:"Solid \u88ab\u8bbe\u8ba1\u4e3a\u6613\u4e8e\u4e0e TypeScript \u4e00\u8d77\u4f7f\u7528\uff1a\u5b83\u4f7f\u7528\u6807\u51c6 JSX \u4f7f\u4ee3\u7801\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u88ab TypeScript \u7406\u89e3\uff0c\u5e76\u4e14\u5b83\u4e3a\u5176 API \u63d0\u4f9b\u4e86\u590d\u6742\u7684\u5185\u7f6e\u7c7b\u578b\u3002\u672c\u6307\u5357\u4ecb\u7ecd\u4e86\u4e00\u4e9b\u4f7f\u7528 TypeScript \u548c\u952e\u5165 Solid \u4ee3\u7801\u7684\u6709\u7528\u6280\u5de7\u3002"}),"\n",(0,s.jsx)(n.h2,{id:"\u914d\u7f6e-typescript",children:(0,s.jsx)(n.a,{href:"https://docs.solidjs.com/guides/foundations/typescript-for-solid#configuring-typescript",children:"\u914d\u7f6e Typescript"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/solidjs/templates/",children:"Solid \u5165\u95e8\u6a21\u677f"}),"\u4e3a ",(0,s.jsx)(n.a,{href:"https://github.com/solidjs/templates/blob/master/ts/tsconfig.json",children:(0,s.jsx)(n.code,{children:"tsconfig.json"})}),"\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u8981\u914d\u7f6e\u9884\u5148\u5b58\u5728\u7684 Solid Javascript \u9879\u76ee\u4ee5\u4f7f\u7528 Typescript\uff0c\u8bf7\u9075\u5faa\u672c",(0,s.jsx)(n.a,{href:"https://docs.solidjs.com/guides/how-to-guides/get-ready-for-solid/installation-and-setup#setup-typescript-in-pre-existing-solidjs-javascript-projects",children:"\u6307\u5357"}),"\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u6700\u91cd\u8981\u7684\u662f\uff0c\u8981\u5c06 TypeScript \u4e0e Solid JSX \u7f16\u8bd1\u5668\u4e00\u8d77\u4f7f\u7528\uff0c\u60a8\u9700\u8981\u5c06 TypeScript \u914d\u7f6e\u4e3a\u4e0d\u4f7f\u7528 JSX \u6784\u9020 via ",(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/tsconfig#jsx",children:(0,s.jsx)(n.code,{children:'"jsx": "preserve"'})})," \uff0c\u5e76\u544a\u8bc9 TypeScript JSX \u7c7b\u578b\u6765\u81ea\u54ea\u91cc ",(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/tsconfig#jsxImportSource",children:(0,s.jsx)(n.code,{children:'"jsxImportSource": "solid-js"'})})," via \u3002\u56e0\u6b64\uff0c\u6700\u5c0f\u503c ",(0,s.jsx)(n.code,{children:"tsconfig.json"})," \u5982\u4e0b\u6240\u793a\uff1a"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'{    "compilerOptions": {      "jsx": "preserve",      "jsxImportSource": "solid-js"    }  }'})}),"\n",(0,s.jsxs)(n.p,{children:["If your code base uses a mix of JSX types (e.g., some files are React while other files are Solid), you can set the default ",(0,s.jsx)(n.code,{children:"jsxImportSource"})," in ",(0,s.jsx)(n.code,{children:"tsconfig.json"})," for the majority of your code, and then ",(0,s.jsxs)(n.a,{href:"https://www.typescriptlang.org/tsconfig#jsxImportSource",children:["override the ",(0,s.jsx)(n.code,{children:"jsxImportSource"})," option"]})," in specific ",(0,s.jsx)(n.code,{children:".tsx"})," files using the following pragma:",(0,s.jsx)(n.br,{}),"\n","\u5982\u679c\u4f60\u7684\u4ee3\u7801\u5e93\u6df7\u5408\u4f7f\u7528 JSX \u7c7b\u578b\uff08\u4f8b\u5982\uff0c\u4e00\u4e9b\u6587\u4ef6\u662f React\uff0c\u800c\u5176\u4ed6\u6587\u4ef6\u662f Solid\uff09\uff0c\u4f60\u53ef\u4ee5 ",(0,s.jsx)(n.code,{children:"tsconfig.json"})," \u4e3a\u5927\u90e8\u5206\u4ee3\u7801\u8bbe\u7f6e\u9ed8\u8ba4\u503c ",(0,s.jsx)(n.code,{children:"jsxImportSource"})," \uff0c\u7136\u540e\u4f7f\u7528\u4ee5\u4e0b\u7f16\u8bd1\u6307\u793a\u8986\u76d6\u7279\u5b9a ",(0,s.jsx)(n.code,{children:".tsx"})," \u6587\u4ef6\u4e2d\u7684 ",(0,s.jsx)(n.code,{children:"jsxImportSource"})," \u9009\u9879\uff1a"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"/** @jsxImportSource solid-js */"})}),"\n",(0,s.jsx)(n.p,{children:"or"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"/** @jsxImportSource react */"})}),"\n",(0,s.jsxs)(n.p,{children:["In order to make use of the latter, you'll need to make sure that you have ",(0,s.jsx)(n.code,{children:"react"})," and it's co-dependencies properly installed in your project, and that your project is properly setup to make use of react's JSX files.",(0,s.jsx)(n.br,{}),"\n","\u4e3a\u4e86\u4f7f\u7528\u540e\u8005\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u4f60\u7684\u9879\u76ee\u4e2d\u6b63\u786e ",(0,s.jsx)(n.code,{children:"react"})," \u5b89\u88c5\u4e86\u5b83\u7684\u5171\u540c\u4f9d\u8d56\u9879\uff0c\u5e76\u4e14\u4f60\u7684\u9879\u76ee\u88ab\u6b63\u786e\u8bbe\u7f6e\u4ee5\u4f7f\u7528 react \u7684 JSX \u6587\u4ef6\u3002"]}),"\n",(0,s.jsx)(n.h2,{id:"api-types-api-\u7c7b\u578b",children:(0,s.jsx)(n.a,{href:"https://docs.solidjs.com/guides/foundations/typescript-for-solid#api-types",children:"API Types API \u7c7b\u578b"})}),"\n",(0,s.jsxs)(n.p,{children:["Solid is written in TypeScript, so everything is typed out of the box.",(0,s.jsx)(n.br,{}),"\n","Solid \u662f\u7528 TypeScript \u7f16\u5199\u7684\uff0c\u56e0\u6b64\u6240\u6709\u5185\u5bb9\u90fd\u662f\u5f00\u7bb1\u5373\u7528\u7684\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"https://docs.solidjs.com/references/api-reference",children:"API documentation"})," details the types for all API calls, as well as several helpful type definitions to make it easier to refer to Solid notions when you need to specify explicit types. Here, we explore the resulting types when using a few core primitives."]}),"\n",(0,s.jsx)(n.h3,{id:"signals-\u4fe1\u53f7",children:(0,s.jsx)(n.a,{href:"https://docs.solidjs.com/guides/foundations/typescript-for-solid#signals",children:"Signals \u4fe1\u53f7"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"createSignal<T>"})," is parameterized by the type ",(0,s.jsx)(n.code,{children:"T"})," of the object stored in the signal. For example:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.code,{children:"createSignal<T>"})," \u7531\u4fe1\u53f7\u4e2d\u5b58\u50a8\u7684\u5bf9\u8c61\u7c7b\u578b ",(0,s.jsx)(n.code,{children:"T"})," \u8fdb\u884c\u53c2\u6570\u5316\u3002\u4f8b\u5982\uff1a"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"const [count, setCount] = createSignal<number>();"})}),"\n",(0,s.jsxs)(n.p,{children:["The above ",(0,s.jsx)(n.code,{children:"createSignal"})," has the return type ",(0,s.jsx)(n.code,{children:"Signal<number>"}),", corresponding to the type we passed to it. This is a tuple of the getter and setter, which each have a ",(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/generics.html",children:"generic"})," type:",(0,s.jsx)(n.br,{}),"\n","\u4e0a\u9762 ",(0,s.jsx)(n.code,{children:"createSignal"})," \u6709 return type ",(0,s.jsx)(n.code,{children:"Signal<number>"})," \uff0c\u5bf9\u5e94\u4e8e\u6211\u4eec\u4f20\u9012\u7ed9\u5b83\u7684\u7c7b\u578b\u3002\u8fd9\u662f getter \u548c setter \u7684\u5143\u7ec4\uff0c\u5b83\u4eec\u5404\u6709\u4e00\u4e2a\u6cdb\u578b\u7c7b\u578b\uff1a"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'import type { Signal, Accessor, Setter } from "solid-js";  type Signal<T> = [get: Accessor<T>, set: Setter<T>];'})}),"\n",(0,s.jsxs)(n.p,{children:["TypeScript 3.8 added a new syntax for type-only imports and exports. ",(0,s.jsx)(n.code,{children:"import type"})," only imports declarations that will be used for type annotations and declarations. They will be fully erased after compilation, and will not be included in the emitted JavaScript. You can read more about them ",(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html",children:"here"}),(0,s.jsx)(n.br,{}),"\n","TypeScript 3.8 \u4e3a\u7eaf\u7c7b\u578b\u5bfc\u5165\u548c\u5bfc\u51fa\u6dfb\u52a0\u4e86\u65b0\u8bed\u6cd5\u3002 ",(0,s.jsx)(n.code,{children:"import type"})," \u4ec5\u5bfc\u5165\u5c06\u7528\u4e8e\u7c7b\u578b\u6279\u6ce8\u548c\u58f0\u660e\u7684\u58f0\u660e\u3002\u5b83\u4eec\u5728\u7f16\u8bd1\u540e\u5c06\u88ab\u5b8c\u5168\u64e6\u9664\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5305\u542b\u5728\u53d1\u51fa\u7684 JavaScript \u4e2d\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u5b83\u4eec\u7684\u4fe1\u606f"]}),"\n",(0,s.jsxs)(n.p,{children:["In this case, the signal getter ",(0,s.jsx)(n.code,{children:"count"})," has type ",(0,s.jsx)(n.code,{children:"Accessor<number | undefined>"}),". ",(0,s.jsx)(n.code,{children:"Accessor<T>"})," is a type definition provided by Solid, in this case equivalent to ",(0,s.jsx)(n.code,{children:"() => number | undefined"}),". The ",(0,s.jsx)(n.code,{children:"| undefined"})," gets added in this example because we did not provide a default value to ",(0,s.jsx)(n.code,{children:"createSignal"}),", so the signal value indeed starts out as ",(0,s.jsx)(n.code,{children:"undefined"}),".",(0,s.jsx)(n.br,{}),"\n","\u5728\u672c\u4f8b\u4e2d\uff0c\u4fe1\u53f7 getter ",(0,s.jsx)(n.code,{children:"count"})," \u7684\u7c7b\u578b ",(0,s.jsx)(n.code,{children:"Accessor<number | undefined>"})," \u4e3a \u3002 ",(0,s.jsx)(n.code,{children:"Accessor<T>"})," \u662f Solid \u63d0\u4f9b\u7684\u7c7b\u578b\u5b9a\u4e49\uff0c\u5728\u672c\u4f8b\u4e2d\u7b49\u6548\u4e8e ",(0,s.jsx)(n.code,{children:"() => number | undefined"})," \u3002\u5728\u6b64\u793a\u4f8b\u4e2d ",(0,s.jsx)(n.code,{children:"| undefined"})," \u6dfb\u52a0\u4e86 \uff0c\u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u4e3a ",(0,s.jsx)(n.code,{children:"createSignal"})," \u63d0\u4f9b\u9ed8\u8ba4\u503c\uff0c\u56e0\u6b64\u4fe1\u53f7\u503c\u786e\u5b9e\u4ee5 \u5f00\u5934\u3002 ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n",(0,s.jsxs)(n.p,{children:["The signal setter ",(0,s.jsx)(n.code,{children:"setCount"})," has type ",(0,s.jsx)(n.code,{children:"Setter<number>"}),", which is a more complicated type definition corresponding roughly to ",(0,s.jsx)(n.code,{children:"(value?: number | ((prev?: number) => number)) => number"}),", representing the two possibilities for the passed argument: you can call ",(0,s.jsx)(n.code,{children:"setCount"})," with either a ",(0,s.jsx)(n.code,{children:"number"})," or a function taking the previous value (if there was one) and returning a ",(0,s.jsx)(n.code,{children:"number"}),". Note that again, both the ",(0,s.jsx)(n.code,{children:"number"})," and the ",(0,s.jsx)(n.code,{children:"number"})," parameter for the function are optional, since the signal initial value was ",(0,s.jsx)(n.code,{children:"undefined"}),".",(0,s.jsx)(n.br,{}),"\n","\u4fe1\u53f7\u8bbe\u7f6e\u5668 ",(0,s.jsx)(n.code,{children:"setCount"})," \u5177\u6709 type ",(0,s.jsx)(n.code,{children:"Setter<number>"})," \uff0c\u8fd9\u662f\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u7c7b\u578b\u5b9a\u4e49\uff0c\u5927\u81f4\u5bf9\u5e94\u4e8e ",(0,s.jsx)(n.code,{children:"(value?: number | ((prev?: number) => number)) => number"})," \uff0c\u8868\u793a\u4f20\u9012\u53c2\u6570\u7684\u4e24\u79cd\u53ef\u80fd\u6027\uff1a\u60a8\u53ef\u4ee5\u4f7f\u7528 a ",(0,s.jsx)(n.code,{children:"number"})," \u6216\u51fd\u6570\u8c03\u7528 ",(0,s.jsx)(n.code,{children:"setCount"})," \uff0c\u8be5\u51fd\u6570\u91c7\u7528\u524d\u4e00\u4e2a\u503c\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u5e76\u8fd4\u56de ",(0,s.jsx)(n.code,{children:"number"})," .\u540c\u6837\uff0c\u8bf7\u6ce8\u610f\uff0c\u51fd\u6570\u7684 ",(0,s.jsx)(n.code,{children:"number"})," \u548c ",(0,s.jsx)(n.code,{children:"number"})," \u53c2\u6570\u90fd\u662f\u53ef\u9009\u7684\uff0c\u56e0\u4e3a\u4fe1\u53f7\u521d\u59cb\u503c\u4e3a ",(0,s.jsx)(n.code,{children:"undefined"})," \u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["In reality the ",(0,s.jsx)(n.code,{children:"Setter"}),' type is more complicated than this since we need to differentiate between passing a setter function and passing a function as a value that we want the signal to be set to. If you\'re getting a TypeScript error "Argument ... is not assignable to parameter" when calling ',(0,s.jsx)(n.code,{children:"setCount(value)"}),", then try wrapping the setter argument as in ",(0,s.jsx)(n.code,{children:"setCount(() => value)"})," to make sure that ",(0,s.jsx)(n.code,{children:"value"})," isn't called.",(0,s.jsx)(n.br,{}),"\n","\u5b9e\u9645\u4e0a\uff0c\u8be5 ",(0,s.jsx)(n.code,{children:"Setter"})," \u7c7b\u578b\u6bd4\u8fd9\u66f4\u590d\u6742\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u533a\u5206\u4f20\u9012 setter \u51fd\u6570\u548c\u5c06\u51fd\u6570\u4f5c\u4e3a\u6211\u4eec\u5e0c\u671b\u4fe1\u53f7\u8bbe\u7f6e\u4e3a\u7684\u503c\u4f20\u9012\u3002\u5982\u679c\u60a8\u6536\u5230 TypeScript \u9519\u8bef\u201cArgument ...is not assignable to parameter\u201c ",(0,s.jsx)(n.code,{children:"setCount(value)"})," \uff0c\u7136\u540e\u5c1d\u8bd5\u5c06 setter \u53c2\u6570\u5305\u88c5\u4e3a in ",(0,s.jsx)(n.code,{children:"setCount(() => value)"})," \u4ee5\u786e\u4fdd\u672a ",(0,s.jsx)(n.code,{children:"value"})," \u88ab\u8c03\u7528\u3002"]}),"\n",(0,s.jsx)(n.h5,{id:"defaults-\u8fdd\u7ea6",children:(0,s.jsx)(n.a,{href:"https://docs.solidjs.com/guides/foundations/typescript-for-solid#defaults",children:"Defaults \u8fdd\u7ea6"})}),"\n",(0,s.jsxs)(n.p,{children:["We can avoid having to explicitly provide the type of the signal when calling ",(0,s.jsx)(n.code,{children:"createSignal"}),", and avoid the ",(0,s.jsx)(n.code,{children:"| undefined"})," part of the type, by providing a default value to ",(0,s.jsx)(n.code,{children:"createSignal"}),":",(0,s.jsx)(n.br,{}),"\n","\u6211\u4eec\u53ef\u4ee5\u907f\u514d\u5728\u8c03\u7528 ",(0,s.jsx)(n.code,{children:"createSignal"})," \u65f6\u663e\u5f0f\u63d0\u4f9b\u4fe1\u53f7\u7684\u7c7b\u578b\uff0c\u5e76\u901a\u8fc7\u63d0\u4f9b\u9ed8\u8ba4\u503c\u6765 ",(0,s.jsx)(n.code,{children:"createSignal"})," \u907f\u514d\u7c7b\u578b ",(0,s.jsx)(n.code,{children:"| undefined"})," \u7684\u4e00\u90e8\u5206\uff1a"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'const [count, setCount] = createSignal(0);  const [name, setName] = createSignal("");'})}),"\n",(0,s.jsxs)(n.p,{children:["In this case, TypeScript infers that the signal types are ",(0,s.jsx)(n.code,{children:"number"})," and ",(0,s.jsx)(n.code,{children:"string"})," respectively. Thus, for example, ",(0,s.jsx)(n.code,{children:"count"})," obtains type ",(0,s.jsx)(n.code,{children:"Accessor<number>"})," and ",(0,s.jsx)(n.code,{children:"name"})," obtains type ",(0,s.jsx)(n.code,{children:"Accessor<string>"})," (without ",(0,s.jsx)(n.code,{children:"| undefined"}),").",(0,s.jsx)(n.br,{}),"\n","\u5728\u672c\u4f8b\u4e2d\uff0cTypeScript \u63a8\u65ad\u4fe1\u53f7\u7c7b\u578b\u5206\u522b\u4e3a ",(0,s.jsx)(n.code,{children:"number"})," \u548c ",(0,s.jsx)(n.code,{children:"string"})," \u3002\u56e0\u6b64\uff0c\u4f8b\u5982\uff0c ",(0,s.jsx)(n.code,{children:"count"})," \u83b7\u53d6\u7c7b\u578b ",(0,s.jsx)(n.code,{children:"Accessor<number>"})," \u5e76 ",(0,s.jsx)(n.code,{children:"name"})," \u83b7\u53d6\u7c7b\u578b ",(0,s.jsx)(n.code,{children:"Accessor<string>"})," \uff08\u4e0d\u5e26 ",(0,s.jsx)(n.code,{children:"| undefined"})," \uff09\u3002"]}),"\n",(0,s.jsx)(n.h3,{id:"context-\u4e0a\u4e0b\u6587",children:(0,s.jsx)(n.a,{href:"https://docs.solidjs.com/guides/foundations/typescript-for-solid#context",children:"Context \u4e0a\u4e0b\u6587"})}),"\n",(0,s.jsx)(n.p,{children:"Similar to signals, \u4e0e\u4fe1\u53f7\u7c7b\u4f3c\uff0c"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.solidjs.com/docs/latest/api#createcontext",children:(0,s.jsx)(n.code,{children:"createContext<T>"})})," is parameterized by the type ",(0,s.jsx)(n.code,{children:"T"})," of the context value. We can provide this type explicitly:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.code,{children:"createContext<T>"})," \u6309\u4e0a\u4e0b\u6587\u503c\u7684\u7c7b\u578b ",(0,s.jsx)(n.code,{children:"T"})," \u53c2\u6570\u5316\u3002\u6211\u4eec\u53ef\u4ee5\u663e\u5f0f\u63d0\u4f9b\u8fd9\u79cd\u7c7b\u578b\uff1a"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"type Data = { count: number; name: string };  const dataContext = createContext<Data>();"})}),"\n",(0,s.jsxs)(n.p,{children:["In this case, ",(0,s.jsx)(n.code,{children:"dataContext"})," has type ",(0,s.jsx)(n.code,{children:"Context<Data | undefined>"}),", causing ",(0,s.jsx)(n.code,{children:"useContext(dataContext)"})," to have matching return type ",(0,s.jsx)(n.code,{children:"Data | undefined"}),". The reason for ",(0,s.jsx)(n.code,{children:"| undefined"})," is that the context might not be provided in the ancestors of the current component, in which case ",(0,s.jsx)(n.code,{children:"useContext"})," returns ",(0,s.jsx)(n.code,{children:"undefined"}),".",(0,s.jsx)(n.br,{}),"\n","\u5728\u672c\u4f8b\u4e2d\uff0c ",(0,s.jsx)(n.code,{children:"dataContext"})," has type ",(0,s.jsx)(n.code,{children:"Context<Data | undefined>"})," \uff0c\u5bfc\u81f4 ",(0,s.jsx)(n.code,{children:"useContext(dataContext)"})," \u5177\u6709\u5339\u914d\u7684\u8fd4\u56de\u7c7b\u578b ",(0,s.jsx)(n.code,{children:"Data | undefined"})," \u3002\u539f\u56e0\u662f ",(0,s.jsx)(n.code,{children:"| undefined"})," \u5f53\u524d\u7ec4\u4ef6\u7684\u7956\u5148\u4e2d\u53ef\u80fd\u672a\u63d0\u4f9b\u4e0a\u4e0b\u6587\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c ",(0,s.jsx)(n.code,{children:"useContext"})," \u8fd4\u56de ",(0,s.jsx)(n.code,{children:"undefined"})," ."]}),"\n",(0,s.jsxs)(n.p,{children:["If we instead provide a default value to ",(0,s.jsx)(n.code,{children:"createContext"}),", we avoid the ",(0,s.jsx)(n.code,{children:"| undefined"})," part of the type, and often avoid having to explicitly specify the type of the ",(0,s.jsx)(n.code,{children:"createContext"})," as well:",(0,s.jsx)(n.br,{}),"\n","\u5982\u679c\u6211\u4eec\u6539\u4e3a ",(0,s.jsx)(n.code,{children:"createContext"})," \u63d0\u4f9b\u9ed8\u8ba4\u503c \uff0c\u6211\u4eec\u5c06\u907f\u514d\u4f7f\u7528 ",(0,s.jsx)(n.code,{children:"| undefined"})," \u7c7b\u578b\u7684\u90e8\u5206\uff0c\u5e76\u4e14\u901a\u5e38\u4e5f\u4e0d\u5fc5\u663e\u5f0f\u6307\u5b9a \u7684\u7c7b\u578b ",(0,s.jsx)(n.code,{children:"createContext"})," \uff1a"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'const dataContext = createContext({ count: 0, name: "" });'})}),"\n",(0,s.jsxs)(n.p,{children:["In this case, TypeScript infers that ",(0,s.jsx)(n.code,{children:"dataContext"})," has type ",(0,s.jsx)(n.code,{children:"Context<{count: number, name: string}>"}),", which is equivalent to ",(0,s.jsx)(n.code,{children:"Context<Data>"})," (without ",(0,s.jsx)(n.code,{children:"| undefined"}),").",(0,s.jsx)(n.br,{}),"\n","\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cTypeScript \u63a8\u65ad\u5177\u6709 ",(0,s.jsx)(n.code,{children:"dataContext"})," \u7c7b\u578b ",(0,s.jsx)(n.code,{children:"Context<{count: number, name: string}>"})," \uff0c\u8fd9\u76f8\u5f53\u4e8e ",(0,s.jsx)(n.code,{children:"Context<Data>"})," \uff08\u6ca1\u6709 ",(0,s.jsx)(n.code,{children:"| undefined"})," \uff09\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["Another common pattern is to define a factory function that produces the value for a context. Then we can grab the return type of that function using TypeScript's ",(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#returntypetype",children:(0,s.jsx)(n.code,{children:"ReturnType"})})," type helper, and use that to type the context:",(0,s.jsx)(n.br,{}),"\n","\u53e6\u4e00\u79cd\u5e38\u89c1\u6a21\u5f0f\u662f\u5b9a\u4e49\u4e00\u4e2a\u5de5\u5382\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u4e3a\u4e0a\u4e0b\u6587\u751f\u6210\u503c\u3002\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 TypeScript \u7684\u7c7b\u578b\u5e2e\u52a9\u7a0b\u5e8f\u83b7\u53d6\u8be5\u51fd\u6570\u7684\u8fd4\u56de ",(0,s.jsx)(n.code,{children:"ReturnType"})," \u7c7b\u578b\uff0c\u5e76\u4f7f\u7528\u5b83\u6765\u952e\u5165\u4e0a\u4e0b\u6587\uff1a"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'export const makeCountNameContext = (initialCount = 0, initialName = "") => {    const [count, setCount] = createSignal(initialCount);    const [name, setName] = createSignal(initialName);    return [      { count, name },      { setCount, setName },    ] as const;    // `as const` forces tuple type inference  };  type CountNameContextType = ReturnType<typeof makeCountNameContext>;  export const CountNameContext = createContext<CountNameContextType>();  export const useCountNameContext = () => useContext(CountNameContext);'})}),"\n",(0,s.jsxs)(n.p,{children:["In this example, ",(0,s.jsx)(n.code,{children:"CountNameContextType"})," corresponds to the return value of ",(0,s.jsx)(n.code,{children:"makeCountNameContext"}),":"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"[    {readonly count: Accessor<number>, readonly name: Accessor<string>},    {readonly setCount: Setter<number>, readonly setName: Setter<string>}  ]"})}),"\n",(0,s.jsxs)(n.p,{children:["and ",(0,s.jsx)(n.code,{children:"useCountNameContext"})," has type ",(0,s.jsx)(n.code,{children:"() => CountNameContextType | undefined"}),".",(0,s.jsx)(n.br,{}),"\n","\u5e76 ",(0,s.jsx)(n.code,{children:"useCountNameContext"})," \u5177\u6709\u7c7b\u578b ",(0,s.jsx)(n.code,{children:"() => CountNameContextType | undefined"})," \u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["If you want to avoid the ",(0,s.jsx)(n.code,{children:"undefined"})," possibility, you could assert that the context is always provided when used:",(0,s.jsx)(n.br,{}),"\n","\u5982\u679c\u8981\u907f\u514d\u8fd9\u79cd ",(0,s.jsx)(n.code,{children:"undefined"})," \u53ef\u80fd\u6027\uff0c\u53ef\u4ee5\u65ad\u8a00\u5728\u4f7f\u7528\u65f6\u59cb\u7ec8\u63d0\u4f9b\u4e0a\u4e0b\u6587\uff1a"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"export const useCountNameContext = () => useContext(CountNameContext)!;"})}),"\n",(0,s.jsxs)(n.p,{children:["This is a dangerous assumption; it would be safer to actually provide a default argument to ",(0,s.jsx)(n.code,{children:"createContext"})," so that the context is always defined.",(0,s.jsx)(n.br,{}),"\n","\u8fd9\u662f\u4e00\u4e2a\u5371\u9669\u7684\u5047\u8bbe;\u5b9e\u9645\u63d0\u4f9b\u9ed8\u8ba4\u53c2\u6570\u4f1a\u66f4\u5b89\u5168\uff0c ",(0,s.jsx)(n.code,{children:"createContext"})," \u4ee5\u4fbf\u59cb\u7ec8\u5b9a\u4e49\u4e0a\u4e0b\u6587\u3002"]}),"\n",(0,s.jsx)(n.h2,{id:"component-types-\u7ec4\u4ef6\u7c7b\u578b",children:(0,s.jsx)(n.a,{href:"https://docs.solidjs.com/guides/foundations/typescript-for-solid#component-types",children:"Component Types \u7ec4\u4ef6\u7c7b\u578b"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'import type { JSX, Component } from "solid-js";  type Component<P = {}> = (props: P) => JSX.Element;'})}),"\n",(0,s.jsxs)(n.p,{children:["To type a basic component function, use the ",(0,s.jsx)(n.code,{children:"Component<P>"})," type, where ",(0,s.jsx)(n.code,{children:"P"})," is the type of the ",(0,s.jsx)(n.code,{children:"props"})," argument and should be an ",(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/objects.html",children:"object type"}),". This will enforce that correctly typed props get passed in as attributes, and that the return value is something that can be rendered by Solid: a ",(0,s.jsx)(n.code,{children:"JSX.Element"})," can be a DOM node, an array of ",(0,s.jsx)(n.code,{children:"JSX.Element"}),"s, a function returning a ",(0,s.jsx)(n.code,{children:"JSX.Element"}),", a boolean, ",(0,s.jsx)(n.code,{children:"undefined"}),"/",(0,s.jsx)(n.code,{children:"null"}),", etc. Here are some examples:",(0,s.jsx)(n.br,{}),"\n","\u82e5\u8981\u952e\u5165\u57fa\u672c\u7ec4\u4ef6\u51fd\u6570\uff0c\u8bf7\u4f7f\u7528 ",(0,s.jsx)(n.code,{children:"Component<P>"})," type\uff0c\u5176\u4e2d ",(0,s.jsx)(n.code,{children:"P"})," \u662f ",(0,s.jsx)(n.code,{children:"props"})," \u53c2\u6570\u7684\u7c7b\u578b\uff0c\u5e94\u4e3a\u5bf9\u8c61\u7c7b\u578b\u3002\u8fd9\u5c06\u5f3a\u5236\u8981\u6c42\u6b63\u786e\u952e\u5165\u7684 props \u4f5c\u4e3a\u5c5e\u6027\u4f20\u5165\uff0c\u5e76\u4e14\u8fd4\u56de\u503c\u662f\u53ef\u4ee5\u7531 Solid \u5448\u73b0\u7684\u5185\u5bb9\uff1aa \u53ef\u4ee5\u662f DOM \u8282\u70b9\u3001s \u6570\u7ec4 ",(0,s.jsx)(n.code,{children:"JSX.Element"})," \u3001\u8fd4\u56de a ",(0,s.jsx)(n.code,{children:"JSX.Element"})," ",(0,s.jsx)(n.code,{children:"JSX.Element"})," \u3001\u5e03\u5c14\u503c ",(0,s.jsx)(n.code,{children:"undefined"})," / ",(0,s.jsx)(n.code,{children:"null"})," \u7b49\u7684\u51fd\u6570\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u793a\u4f8b\uff1a"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"const Counter: Component = () => {    const [count, setCount] = createSignal(0);    return <button onClick={() => setCount((c) => c + 1)}>{count()}</button>;  };  <Counter />; // good  <Counter initial={5} />; // type error: no initial prop  <Counter>hi</Counter>; // type error: no children prop  const InitCounter: Component<{ initial: number }> = (props) => {    const [count, setCount] = createSignal(props.initial);    return <button onClick={() => setCount((c) => c + 1)}>{count()}</button>;  };  <InitCounter initial={5} />; // good"})}),"\n",(0,s.jsxs)(n.p,{children:["If you want your component to take JSX children, you can either explicitly add a type for ",(0,s.jsx)(n.code,{children:"children"})," to ",(0,s.jsx)(n.code,{children:"P"}),", or you can use the ",(0,s.jsx)(n.code,{children:"ParentComponent"})," type which automatically adds ",(0,s.jsx)(n.code,{children:"children?: JSX.Element"}),". Alternatively, if you'd like to declare your component with ",(0,s.jsx)(n.code,{children:"function"})," instead of ",(0,s.jsx)(n.code,{children:"const"}),", you can use the ",(0,s.jsx)(n.code,{children:"ParentProps"})," helper to type ",(0,s.jsx)(n.code,{children:"props"}),". Some examples:",(0,s.jsx)(n.br,{}),"\n","\u5982\u679c\u5e0c\u671b\u7ec4\u4ef6\u91c7\u7528 JSX \u5b50\u9879\uff0c\u5219\u53ef\u4ee5\u663e\u5f0f\u6dfb\u52a0 to ",(0,s.jsx)(n.code,{children:"children"})," ",(0,s.jsx)(n.code,{children:"P"})," \u7684\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u81ea\u52a8\u6dfb\u52a0 ",(0,s.jsx)(n.code,{children:"children?: JSX.Element"})," \u7684 ",(0,s.jsx)(n.code,{children:"ParentComponent"})," \u7c7b\u578b\u3002\u6216\u8005\uff0c\u5982\u679c\u8981\u58f0\u660e ",(0,s.jsx)(n.code,{children:"function"})," \u7ec4\u4ef6 \u800c\u4e0d\u662f ",(0,s.jsx)(n.code,{children:"const"})," \uff0c\u53ef\u4ee5\u4f7f\u7528 ",(0,s.jsx)(n.code,{children:"ParentProps"})," \u5e2e\u52a9\u7a0b\u5e8f\u952e\u5165 ",(0,s.jsx)(n.code,{children:"props"})," \u3002\u4e00\u4e9b\u4f8b\u5b50\uff1a"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'import { JSX, ParentComponent, ParentProps } from "solid-js";  type ParentProps<P = {}> = P & { children?: JSX.Element };  type ParentComponent<P = {}> = Component<ParentProps<P>>;  // Equivalent typings:  //const CustomCounter: Component<{children?: JSX.Element}> = ...  //function CustomCounter(props: ParentProps): JSX.Element { ...  const CustomCounter: ParentComponent = (props) => {    const [count, setCount] = createSignal(0);    return (      <button onClick={() => setCount((c) => c + 1)}>        {count()}        {props.children}      </button>    );  };  // Equivalent typings:  //const CustomInitCounter: Component<{initial: number, children?: JSX.Element}> = ...  //function CustomInitCounter(props: ParentProps<{initial: number}>): JSX.Element { ...  const CustomInitCounter: ParentComponent<{ initial: number }> = (props) => {    const [count, setCount] = createSignal(props.initial);    return (      <button onClick={() => setCount((c) => c + 1)}>        {count()}        {props.children}      </button>    );  };'})}),"\n",(0,s.jsxs)(n.p,{children:["In the latter example, the ",(0,s.jsx)(n.code,{children:"props"})," parameter automatically gets typed as ",(0,s.jsx)(n.code,{children:"props: ParentProps<{initial: number}>"})," which is equivalent to ",(0,s.jsx)(n.code,{children:"props: {initial: number, children?: JSX.Element}"}),". (Note that, before Solid 1.4, ",(0,s.jsx)(n.code,{children:"Component"})," was equivalent to ",(0,s.jsx)(n.code,{children:"ParentComponent"}),".)",(0,s.jsx)(n.br,{}),"\n","\u5728\u540e\u4e00\u4e2a\u793a\u4f8b\u4e2d ",(0,s.jsx)(n.code,{children:"props"})," \uff0c\u53c2\u6570\u81ea\u52a8\u952e\u5165\u4e3a ",(0,s.jsx)(n.code,{children:"props: ParentProps<{initial: number}>"})," \u7b49\u6548\u4e8e ",(0,s.jsx)(n.code,{children:"props: {initial: number, children?: JSX.Element}"})," \u3002\uff08\u8bf7\u6ce8\u610f\uff0c\u5728 Solid 1.4 \u4e4b\u524d\uff0c ",(0,s.jsx)(n.code,{children:"Component"})," \u76f8\u5f53\u4e8e ",(0,s.jsx)(n.code,{children:"ParentComponent"})," \u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["Solid provides two other ",(0,s.jsx)(n.code,{children:"Component"})," subtypes for dealing with ",(0,s.jsx)(n.code,{children:"children"}),":",(0,s.jsx)(n.br,{}),"\n","Solid \u63d0\u4f9b\u4e86\u53e6\u5916\u4e24 ",(0,s.jsx)(n.code,{children:"Component"})," \u79cd\u7528\u4e8e\u5904\u7406\u7684 ",(0,s.jsx)(n.code,{children:"children"})," \u5b50\u7c7b\u578b\uff1a"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'import {    JSX,    FlowComponent,    FlowProps,    VoidComponent,    VoidProps,  } from "solid-js";  type FlowProps<P = {}, C = JSX.Element> = P & { children: C };  type FlowComponent<P = {}, C = JSX.Element> = Component<FlowProps<P, C>>;  type VoidProps<P = {}> = P & { children?: never };  type VoidComponent<P = {}> = Component<VoidProps<P>>;'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"VoidComponent"})," is for components that definitely do not support ",(0,s.jsx)(n.code,{children:"children"}),". ",(0,s.jsx)(n.code,{children:"VoidComponent<P>"})," is equivalent to ",(0,s.jsx)(n.code,{children:"Component<P>"})," when ",(0,s.jsx)(n.code,{children:"P"})," doesn't provide a type for ",(0,s.jsx)(n.code,{children:"children"}),".",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.code,{children:"VoidComponent"})," \u9002\u7528\u4e8e\u7edd\u5bf9\u4e0d\u652f\u6301 ",(0,s.jsx)(n.code,{children:"children"})," \u7684\u7ec4\u4ef6\u3002 ",(0,s.jsx)(n.code,{children:"VoidComponent<P>"})," \u7b49\u6548\u4e8e ",(0,s.jsx)(n.code,{children:"Component<P>"})," when ",(0,s.jsx)(n.code,{children:"P"})," \u4e0d\u4e3a \u63d0\u4f9b ",(0,s.jsx)(n.code,{children:"children"})," \u7c7b\u578b\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"FlowComponent"}),' is intended for "control flow" components like Solid\'s ',(0,s.jsx)(n.code,{children:"<Show>"})," and ",(0,s.jsx)(n.code,{children:"<For>"}),". Such components generally require ",(0,s.jsx)(n.code,{children:"children"})," to make sense, and sometimes have specific types for ",(0,s.jsx)(n.code,{children:"children"}),", such as requiring it to be a single function. For example:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.code,{children:"FlowComponent"})," \u7528\u4e8e\u201c\u63a7\u5236\u6d41\u201d\u7ec4\u4ef6\uff0c\u5982 Solid ",(0,s.jsx)(n.code,{children:"<Show>"})," \u548c ",(0,s.jsx)(n.code,{children:"<For>"})," \u3002\u6b64\u7c7b\u7ec4\u4ef6\u901a\u5e38\u8981\u6c42\u6709\u610f\u4e49\uff0c\u6709\u65f6\u5177\u6709\u7279\u5b9a\u7684\u7c7b\u578b ",(0,s.jsx)(n.code,{children:"children"})," \uff0c\u4f8b\u5982\u8981\u6c42 ",(0,s.jsx)(n.code,{children:"children"})," \u5b83\u662f\u5355\u4e2a\u51fd\u6570\u3002\u4f8b\u5982\uff1a"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'const CallMeMaybe: FlowComponent<{ when: boolean }, () => void> = (props) => {    createEffect(() => {      if (props.when) props.children();    });    return <>{props.when ? "Calling" : "Not Calling"}</>;  };  <CallMeMaybe when={true} />; // type error: missing children  <CallMeMaybe when={true}>hi</CallMeMaybe>; // type error: children  <CallMeMaybe when={true}>{() => console.log("Here\'s my number")}</CallMeMaybe>; // good'})}),"\n",(0,s.jsx)(n.h2,{id:"event-handlers-\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f",children:(0,s.jsx)(n.a,{href:"https://docs.solidjs.com/guides/foundations/typescript-for-solid#event-handlers",children:"Event Handlers \u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f"})}),"\n",(0,s.jsxs)(n.p,{children:["The namespace ",(0,s.jsx)(n.code,{children:"JSX"})," offers a suite of useful types for working with HTML DOM in particular. See the ",(0,s.jsx)(n.a,{href:"https://github.com/ryansolid/dom-expressions/blob/main/packages/dom-expressions/src/jsx.d.ts",children:"definition of JSX in dom-expressions"})," for all the types provided.",(0,s.jsx)(n.br,{}),"\n","\u547d\u540d\u7a7a\u95f4 ",(0,s.jsx)(n.code,{children:"JSX"})," \u63d0\u4f9b\u4e86\u4e00\u5957\u6709\u7528\u7684\u7c7b\u578b\uff0c\u7279\u522b\u662f\u7528\u4e8e\u5904\u7406 HTML DOM\u3002\u8bf7\u53c2\u9605 dom-expressions \u4e2d JSX \u7684\u5b9a\u4e49\uff0c\u4e86\u89e3\u63d0\u4f9b\u7684\u6240\u6709\u7c7b\u578b\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["One useful helper type provided by the ",(0,s.jsx)(n.code,{children:"JSX"})," namespace is ",(0,s.jsx)(n.code,{children:"JSX.EventHandler<T, E>"}),", which represents a single-argument event handler for a DOM element type ",(0,s.jsx)(n.code,{children:"T"})," and event type ",(0,s.jsx)(n.code,{children:"E"}),". You can use this to type any event handlers you define outside JSX. For example:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.code,{children:"JSX"})," \u547d\u540d\u7a7a\u95f4\u63d0\u4f9b\u7684\u4e00\u79cd\u6709\u7528\u7684\u5e2e\u52a9\u7a0b\u5e8f\u7c7b\u578b\u662f ",(0,s.jsx)(n.code,{children:"JSX.EventHandler<T, E>"})," \uff0c\u5b83\u8868\u793a DOM \u5143\u7d20\u7c7b\u578b ",(0,s.jsx)(n.code,{children:"T"})," \u548c\u4e8b\u4ef6\u7c7b\u578b\u7684 ",(0,s.jsx)(n.code,{children:"E"})," \u5355\u53c2\u6570\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u952e\u5165\u60a8\u5728 JSX \u5916\u90e8\u5b9a\u4e49\u7684\u4efb\u4f55\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u3002\u4f8b\u5982\uff1a"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'import type { JSX } from "solid-js";  const onInput: JSX.EventHandler<HTMLInputElement, InputEvent> = (event) => {    console.log("input changed to", event.currentTarget.value);  };  <input onInput={onInput} />;'})}),"\n",(0,s.jsxs)(n.p,{children:["Handlers defined inline within ",(0,s.jsxs)(n.a,{href:"https://www.solidjs.com/docs/latest/api#on___",children:[(0,s.jsx)(n.code,{children:"on___"})," JSX attributes"]})," (with built-in event types) are automatically typed as the appropriate ",(0,s.jsx)(n.code,{children:"JSX.EventHandler"}),":",(0,s.jsx)(n.br,{}),"\n","\u5728 JSX \u5c5e\u6027\uff08\u5177\u6709\u5185\u7f6e\u4e8b\u4ef6\u7c7b\u578b\uff09\u4e2d ",(0,s.jsx)(n.code,{children:"on___"})," \u5185\u8054\u5b9a\u4e49\u7684\u5904\u7406\u7a0b\u5e8f\u4f1a\u81ea\u52a8\u7c7b\u578b\u5316\u4e3a\u9002\u5f53\u7684 ",(0,s.jsx)(n.code,{children:"JSX.EventHandler"})," \uff1a"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'<input    onInput={(event) => {      console.log("input changed to", event.currentTarget.value);    }}  />'})}),"\n",(0,s.jsxs)(n.p,{children:["Note that ",(0,s.jsx)(n.code,{children:"JSX.EventHandler<T>"})," constrains the event's ",(0,s.jsxs)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget",children:[(0,s.jsx)(n.code,{children:"currentTarget"})," attribute"]})," to be of type ",(0,s.jsx)(n.code,{children:"T"})," (in the example, ",(0,s.jsx)(n.code,{children:"event.currentTarget"})," is typed as ",(0,s.jsx)(n.code,{children:"HTMLInputEvent"}),", so has attribute ",(0,s.jsx)(n.code,{children:"value"}),"). However, the event's ",(0,s.jsxs)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Event/target",children:[(0,s.jsx)(n.code,{children:"target"})," attribute"]})," could be any ",(0,s.jsx)(n.code,{children:"DOMElement"}),". This is because ",(0,s.jsx)(n.code,{children:"currentTarget"})," is the element that the event handler was attached to, so has a known type, whereas ",(0,s.jsx)(n.code,{children:"target"})," is whatever the user interacted with that caused the event to bubble to or get captured by the event handler, which can be any DOM element. One exception is Input and Focus Events when attached directly to ",(0,s.jsx)(n.code,{children:"input"})," elements will have HTMLInputElement as a ",(0,s.jsx)(n.code,{children:"target"}),".",(0,s.jsx)(n.br,{}),"\n","\u8bf7\u6ce8\u610f\uff0c\u5c06 ",(0,s.jsx)(n.code,{children:"JSX.EventHandler<T>"})," \u4e8b\u4ef6\u7684 ",(0,s.jsx)(n.code,{children:"currentTarget"})," \u5c5e\u6027\u9650\u5236\u4e3a type ",(0,s.jsx)(n.code,{children:"T"})," \uff08\u5728\u793a\u4f8b\u4e2d\uff0c\u7c7b\u578b\u4e3a ",(0,s.jsx)(n.code,{children:"HTMLInputEvent"})," \uff0c ",(0,s.jsx)(n.code,{children:"event.currentTarget"})," \u56e0\u6b64 has \u5c5e\u6027 ",(0,s.jsx)(n.code,{children:"value"})," \uff09\u3002\u4f46\u662f\uff0c\u4e8b\u4ef6\u7684 ",(0,s.jsx)(n.code,{children:"target"})," \u5c5e\u6027\u53ef\u4ee5\u662f\u4efb\u4f55 ",(0,s.jsx)(n.code,{children:"DOMElement"})," .\u8fd9\u662f\u56e0\u4e3a ",(0,s.jsx)(n.code,{children:"currentTarget"})," \u662f\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u9644\u52a0\u5230\u7684\u5143\u7d20\uff0c\u56e0\u6b64\u5177\u6709\u5df2\u77e5\u7c7b\u578b\uff0c\u800c ",(0,s.jsx)(n.code,{children:"target"})," \u7528\u6237\u4e0e\u4e4b\u4ea4\u4e92\u7684\u4efb\u4f55\u5185\u5bb9\u90fd\u4f1a\u5bfc\u81f4\u4e8b\u4ef6\u5192\u6ce1\u6216\u88ab\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u6355\u83b7\uff0c\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u53ef\u4ee5\u662f\u4efb\u4f55 DOM \u5143\u7d20\u3002\u4e00\u4e2a\u4f8b\u5916\u662f\uff0c\u5f53\u76f4\u63a5\u9644\u52a0\u5230 ",(0,s.jsx)(n.code,{children:"input"})," \u5143\u7d20\u65f6\uff0c\u8f93\u5165\u548c\u7126\u70b9\u4e8b\u4ef6\u5c06\u5177\u6709 HTMLInputElement \u4f5c\u4e3a ",(0,s.jsx)(n.code,{children:"target"})," ."]}),"\n",(0,s.jsx)(n.h2,{id:"the-ref-attribute-ref-\u5c5e\u6027",children:(0,s.jsx)(n.a,{href:"https://docs.solidjs.com/guides/foundations/typescript-for-solid#the-ref-attribute",children:"The ref Attribute ref \u5c5e\u6027"})}),"\n",(0,s.jsxs)(n.p,{children:["When we use the ",(0,s.jsx)(n.code,{children:"ref"})," attribute with a variable, we tell Solid to assign the DOM element to the variable once the element is rendered. Without TypeScript, this looks like:",(0,s.jsx)(n.br,{}),"\n","\u5f53\u6211\u4eec\u5c06 ",(0,s.jsx)(n.code,{children:"ref"})," \u5c5e\u6027\u4e0e\u53d8\u91cf\u4e00\u8d77\u4f7f\u7528\u65f6\uff0c\u6211\u4eec\u544a\u8bc9 Solid \u5728\u5143\u7d20\u6e32\u67d3\u540e\u5c06 DOM \u5143\u7d20\u5206\u914d\u7ed9\u53d8\u91cf\u3002\u5982\u679c\u6ca1\u6709 TypeScript\uff0c\u8fd9\u770b\u8d77\u6765\u50cf\uff1a"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"let divRef;  console.log(divRef); // undefined  onMount(() => {    console.log(divRef); // <div> element  });  return <div ref={divRef} />;"})}),"\n",(0,s.jsxs)(n.p,{children:["This presents a challenge for typing that variable: should we type ",(0,s.jsx)(n.code,{children:"divRef"})," as an ",(0,s.jsx)(n.code,{children:"HTMLDivElement"}),", even though it's only set as such after rendering? (Here we assume TypeScript's ",(0,s.jsx)(n.code,{children:"strictNullChecks"})," mode is turned on; otherwise, TypeScript ignores potentially ",(0,s.jsx)(n.code,{children:"undefined"})," variables.)",(0,s.jsx)(n.br,{}),"\n","\u8fd9\u7ed9\u952e\u5165\u8be5\u53d8\u91cf\u5e26\u6765\u4e86\u6311\u6218\uff1a\u6211\u4eec\u662f\u5426\u5e94\u8be5\u952e\u5165 ",(0,s.jsx)(n.code,{children:"divRef"})," ",(0,s.jsx)(n.code,{children:"HTMLDivElement"})," \u4e3a \uff0c\u5373\u4f7f\u5b83\u53ea\u662f\u5728\u6e32\u67d3\u540e\u624d\u88ab\u8bbe\u7f6e\u4e3a\uff1f\uff08\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe TypeScript ",(0,s.jsx)(n.code,{children:"strictNullChecks"})," \u7684\u6a21\u5f0f\u662f\u6253\u5f00\u7684;\u5426\u5219\uff0cTypeScript \u4f1a\u5ffd\u7565\u6f5c\u5728\u7684 ",(0,s.jsx)(n.code,{children:"undefined"})," \u53d8\u91cf\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["The safest pattern in TypeScript is to acknowledge that ",(0,s.jsx)(n.code,{children:"divRef"})," is ",(0,s.jsx)(n.code,{children:"undefined"})," for a period of time, and check when using it:",(0,s.jsx)(n.br,{}),"\n","TypeScript \u4e2d\u6700\u5b89\u5168\u7684\u6a21\u5f0f\u662f\u786e\u8ba4\u8fd9\u662f ",(0,s.jsx)(n.code,{children:"divRef"})," ",(0,s.jsx)(n.code,{children:"undefined"})," \u4e00\u6bb5\u65f6\u95f4\uff0c\u5e76\u5728\u4f7f\u7528\u5b83\u65f6\u8fdb\u884c\u68c0\u67e5\uff1a"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"let divRef: HTMLDivElement | undefined;  divRef.focus(); // correctly reported as an error at compile time  onMount(() => {    if (!divRef) return;    divRef.focus(); // correctly allowed  });  return <div ref={divRef}>...</div>;"})}),"\n",(0,s.jsxs)(n.p,{children:["Alternatively, because we know ",(0,s.jsx)(n.code,{children:"onMount"})," gets called only after the ",(0,s.jsx)(n.code,{children:"<div>"})," element gets rendered, we could use a ",(0,s.jsxs)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#non-null-assertion-operator-postfix-",children:["non-null assertion (",(0,s.jsx)(n.code,{children:"!"}),")"]})," when accessing ",(0,s.jsx)(n.code,{children:"divRef"})," within ",(0,s.jsx)(n.code,{children:"onMount"}),":",(0,s.jsx)(n.br,{}),"\n","\u6216\u8005\uff0c\u56e0\u4e3a\u6211\u4eec\u77e5\u9053 ",(0,s.jsx)(n.code,{children:"onMount"})," \u53ea\u6709\u5728 ",(0,s.jsx)(n.code,{children:"<div>"})," \u5143\u7d20\u6e32\u67d3\u540e\u624d\u4f1a\u88ab\u8c03\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u8bbf\u95ee ",(0,s.jsx)(n.code,{children:"divRef"})," \u65f6\u4f7f\u7528\u975e\u7a7a\u65ad\u8a00 \uff08 ",(0,s.jsx)(n.code,{children:"!"})," \uff09 \uff1a ",(0,s.jsx)(n.code,{children:"onMount"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"onMount(() => {    divRef!.focus();  });"})}),"\n",(0,s.jsxs)(n.p,{children:["Another fairly safe pattern is to omit ",(0,s.jsx)(n.code,{children:"undefined"})," from ",(0,s.jsx)(n.code,{children:"divRef"}),"'s type, and use a ",(0,s.jsxs)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#definite-assignment-assertions",children:["definite assignment assertion (",(0,s.jsx)(n.code,{children:"!"}),")"]})," in the ",(0,s.jsx)(n.code,{children:"ref"})," attribute:",(0,s.jsx)(n.br,{}),"\n","\u53e6\u4e00\u4e2a\u76f8\u5f53\u5b89\u5168\u7684\u6a21\u5f0f\u662f\u7701\u7565 ",(0,s.jsx)(n.code,{children:"undefined"})," from ",(0,s.jsx)(n.code,{children:"divRef"})," \u7684\u7c7b\u578b\uff0c\u5e76\u5728\u5c5e\u6027\u4e2d\u4f7f\u7528 ",(0,s.jsx)(n.code,{children:"ref"})," \u786e\u5b9a\u7684\u8d4b\u503c\u65ad\u8a00 \uff08 ",(0,s.jsx)(n.code,{children:"!"})," \uff09\uff1a"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"let divRef: HTMLDivElement;  divRef.focus(); // correctly reported as an error at compile time  onMount(() => {    divRef.focus(); // correctly allowed  });  return <div ref={divRef!}>...</div>;"})}),"\n",(0,s.jsxs)(n.p,{children:["We need to use ",(0,s.jsx)(n.code,{children:"ref={divRef!}"})," because TypeScript assumes that the ",(0,s.jsx)(n.code,{children:"ref"})," attribute is being set to the ",(0,s.jsx)(n.code,{children:"divRef"})," variable, and thus ",(0,s.jsx)(n.code,{children:"divRef"})," should already be assigned. In Solid, it's the other way around: ",(0,s.jsx)(n.code,{children:"divRef"})," gets assigned to by the ",(0,s.jsx)(n.code,{children:"ref"})," attribute. The definite assignment assertion ",(0,s.jsx)(n.code,{children:"divRef!"})," effectively convinces TypeScript that this is what's happening: TypeScript will understand that ",(0,s.jsx)(n.code,{children:"divRef"})," has been assigned after this line.",(0,s.jsx)(n.br,{}),"\n","\u6211\u4eec\u9700\u8981\u4f7f\u7528 ",(0,s.jsx)(n.code,{children:"ref={divRef!}"})," \uff0c\u56e0\u4e3a TypeScript \u5047\u8bbe ",(0,s.jsx)(n.code,{children:"ref"})," \u5c5e\u6027\u88ab\u8bbe\u7f6e\u4e3a ",(0,s.jsx)(n.code,{children:"divRef"})," \u53d8\u91cf\uff0c\u56e0\u6b64 ",(0,s.jsx)(n.code,{children:"divRef"})," \u5e94\u8be5\u5df2\u7ecf\u8d4b\u503c\u3002\u5728 Solid \u4e2d\uff0c\u60c5\u51b5\u6b63\u597d\u76f8\u53cd\uff1a ",(0,s.jsx)(n.code,{children:"divRef"})," \u7531 ",(0,s.jsx)(n.code,{children:"ref"})," \u5c5e\u6027\u8d4b\u503c\u3002\u786e\u5b9a\u7684\u8d4b\u503c\u65ad\u8a00 ",(0,s.jsx)(n.code,{children:"divRef!"})," \u6709\u6548\u5730\u8bf4\u670d\u4e86 TypeScript \u8fd9\u662f\u6b63\u5728\u53d1\u751f\u7684\u4e8b\u60c5\uff1aTypeScript \u5c06\u7406\u89e3\u5728\u6b64\u884c\u4e4b\u540e\u8d4b\u503c\u7684\u5185\u5bb9 ",(0,s.jsx)(n.code,{children:"divRef"})," \u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["With this pattern, TypeScript will correctly flag any accidental uses of refs inside the body of the function (before the JSX block where they get defined). However, TypeScript currently does not flag use of potentially undefined variables within nested functions.",(0,s.jsx)(n.br,{}),"\n","\u4f7f\u7528\u8fd9\u79cd\u6a21\u5f0f\uff0cTypeScript \u5c06\u6b63\u786e\u5730\u6807\u8bb0\u51fd\u6570\u4e3b\u4f53\u5185\u4efb\u4f55\u610f\u5916\u4f7f\u7528\u7684 refs\uff08\u5728\u5b9a\u4e49\u5b83\u4eec\u7684 JSX \u5757\u4e4b\u524d\uff09\u3002\u4f46\u662f\uff0cTypeScript \u76ee\u524d\u4e0d\u4f1a\u6807\u8bb0\u5d4c\u5957\u51fd\u6570\u4e2d\u53ef\u80fd\u672a\u5b9a\u4e49\u53d8\u91cf\u7684\u4f7f\u7528\u3002",(0,s.jsx)(n.br,{}),"\n","In the context of Solid, you need to take care not to use refs inside ",(0,s.jsx)(n.code,{children:"createMemo"}),", ",(0,s.jsx)(n.code,{children:"createRenderEffect"}),", and ",(0,s.jsx)(n.code,{children:"createComputed"})," (before the JSX block that defines the refs), because those functions are called immediately, so the refs won't be defined yet (yet TypeScript won't flag this as an error). By contrast, the previous pattern would catch these errors.",(0,s.jsx)(n.br,{}),"\n","\u5728 Solid \u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u60a8\u9700\u8981\u6ce8\u610f\u4e0d\u8981\u5728 \u3001 ",(0,s.jsx)(n.code,{children:"createRenderEffect"})," \u548c ",(0,s.jsx)(n.code,{children:"createComputed"})," \u4e2d\u4f7f\u7528 refs\uff08\u5728 ",(0,s.jsx)(n.code,{children:"createMemo"})," \u5b9a\u4e49 refs \u7684 JSX \u5757\u4e4b\u524d\uff09\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u51fd\u6570\u4f1a\u7acb\u5373\u8c03\u7528\uff0c\u56e0\u6b64 refs \u5c1a\u672a\u5b9a\u4e49\uff08\u4f46 TypeScript \u4e0d\u4f1a\u5c06\u5176\u6807\u8bb0\u4e3a\u9519\u8bef\uff09\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u524d\u9762\u7684\u6a21\u5f0f\u4f1a\u6355\u83b7\u8fd9\u4e9b\u9519\u8bef\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["Another common, but less safe, pattern is to put the definite assignment assertion at the point of variable declaration.",(0,s.jsx)(n.br,{}),"\n","\u53e6\u4e00\u79cd\u5e38\u89c1\u4f46\u4e0d\u592a\u5b89\u5168\u7684\u6a21\u5f0f\u662f\u5c06\u786e\u5b9a\u8d4b\u503c\u65ad\u8a00\u653e\u5728\u53d8\u91cf\u58f0\u660e\u7684\u70b9\u3002"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"let divRef!: HTMLDivElement;  divRef.focus(); // allowed despite causing an error  onMount(() => {    divRef.focus(); // correctly allowed  });  return <div ref={divRef}>...</div>;"})}),"\n",(0,s.jsxs)(n.p,{children:["This approach effectively turns off assignment checking for that variable, which is an easy workaround, but requires additional care. In particular, unlike the previous pattern, it incorrectly allows premature use of the variable, even outside nested functions.",(0,s.jsx)(n.br,{}),"\n","\u8fd9\u79cd\u65b9\u6cd5\u6709\u6548\u5730\u5173\u95ed\u4e86\u8be5\u53d8\u91cf\u7684\u8d4b\u503c\u68c0\u67e5\uff0c\u8fd9\u662f\u4e00\u79cd\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6cd5\uff0c\u4f46\u9700\u8981\u683c\u5916\u5c0f\u5fc3\u3002\u7279\u522b\u662f\uff0c\u4e0e\u524d\u9762\u7684\u6a21\u5f0f\u4e0d\u540c\uff0c\u5b83\u9519\u8bef\u5730\u5141\u8bb8\u8fc7\u65e9\u4f7f\u7528\u53d8\u91cf\uff0c\u5373\u4f7f\u5728\u5d4c\u5957\u51fd\u6570\u4e4b\u5916\u4e5f\u662f\u5982\u6b64\u3002"]}),"\n",(0,s.jsx)(n.h2,{id:"control-flow-narrowing-\u63a7\u5236\u6d41\u7f29\u5c0f",children:(0,s.jsx)(n.a,{href:"https://docs.solidjs.com/guides/foundations/typescript-for-solid#control-flow-narrowing",children:"Control Flow Narrowing \u63a7\u5236\u6d41\u7f29\u5c0f"})}),"\n",(0,s.jsxs)(n.p,{children:["A common pattern is to use ",(0,s.jsx)(n.a,{href:"https://www.solidjs.com/docs/latest/api#%3Cshow%3E",children:(0,s.jsx)(n.code,{children:"<Show>"})})," to display data only when that data is defined:",(0,s.jsx)(n.br,{}),"\n","\u4e00\u79cd\u5e38\u89c1\u7684\u6a21\u5f0f\u662f\u4ec5\u5728\u5b9a\u4e49\u6570\u636e\u65f6\u624d\u663e\u793a ",(0,s.jsx)(n.code,{children:"<Show>"})," \u6570\u636e\uff1a"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'const [name, setName] = createSignal<string>();  return <Show when={name()}>Hello {name().replace(/\\s+/g, "\\xa0")}!</Show>;'})}),"\n",(0,s.jsxs)(n.p,{children:["In this case, TypeScript can't determine that the two calls to ",(0,s.jsx)(n.code,{children:"name()"})," will return the same value, and that the second call will happen only if the first call returned a truthy value. Thus it will complain that ",(0,s.jsx)(n.code,{children:"name()"})," might be ",(0,s.jsx)(n.code,{children:"undefined"})," when trying to call ",(0,s.jsx)(n.code,{children:".replace()"}),".",(0,s.jsx)(n.br,{}),"\n","\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cTypeScript \u65e0\u6cd5\u786e\u5b9a to ",(0,s.jsx)(n.code,{children:"name()"})," \u7684\u4e24\u6b21\u8c03\u7528\u5c06\u8fd4\u56de\u76f8\u540c\u7684\u503c\uff0c\u5e76\u4e14\u4ec5\u5f53\u7b2c\u4e00\u6b21\u8c03\u7528\u8fd4\u56de\u771f\u5b9e\u503c\u65f6\u624d\u4f1a\u53d1\u751f\u7b2c\u4e8c\u6b21\u8c03\u7528\u3002\u56e0\u6b64\uff0c ",(0,s.jsx)(n.code,{children:"name()"})," \u5b83\u4f1a\u62b1\u6028\u53ef\u80fd\u662f ",(0,s.jsx)(n.code,{children:"undefined"})," \u5728\u5c1d\u8bd5\u8c03\u7528 ",(0,s.jsx)(n.code,{children:".replace()"})," \u65f6\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["Here are two workarounds for this issue:",(0,s.jsx)(n.br,{}),"\n","\u4ee5\u4e0b\u662f\u6b64\u95ee\u9898\u7684\u4e24\u79cd\u89e3\u51b3\u65b9\u6cd5\uff1a"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["You can manually assert that ",(0,s.jsx)(n.code,{children:"name()"})," will be non-null in the second call using TypeScript's ",(0,s.jsxs)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#non-null-assertion-operator-postfix-",children:["non-null assertion operator ",(0,s.jsx)(n.code,{children:"!"})]}),":",(0,s.jsx)(n.br,{}),"\n","\u60a8\u53ef\u4ee5\u4f7f\u7528 TypeScript \u7684\u975e null \u65ad\u8a00\u8fd0\u7b97\u7b26 ",(0,s.jsx)(n.code,{children:"!"})," \u5728\u7b2c\u4e8c\u6b21\u8c03\u7528\u4e2d\u624b\u52a8\u65ad\u8a00\u8be5 ",(0,s.jsx)(n.code,{children:"name()"})," \u503c\u4e3a\u975e null\uff1a"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'return <Show when={name()}>Hello {name()!.replace(/\\s+/g, "\\xa0")}!</Show>;'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["You can use the callback form of ",(0,s.jsx)(n.code,{children:"<Show>"}),", which passes in the value of the ",(0,s.jsx)(n.code,{children:"when"})," prop when it is truthy:",(0,s.jsx)(n.br,{}),"\n","\u60a8\u53ef\u4ee5\u4f7f\u7528 \u7684\u56de\u8c03\u5f62\u5f0f ",(0,s.jsx)(n.code,{children:"<Show>"})," \uff0c\u5f53\u5b83\u4e3a true \u65f6\uff0c\u5b83\u4f1a\u4f20\u5165 ",(0,s.jsx)(n.code,{children:"when"})," prop \u7684\u503c\uff1a"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'return (    <Show when={name()}>{(n) => <>Hello {n().replace(/\\s+/g, "\\xa0")}!</>}</Show>  );'})}),"\n",(0,s.jsxs)(n.p,{children:["In this case, the typing of the ",(0,s.jsx)(n.code,{children:"Show"})," component is clever enough to tell TypeScript that ",(0,s.jsx)(n.code,{children:"n"})," is truthy, so it can't be ",(0,s.jsx)(n.code,{children:"undefined"})," (or ",(0,s.jsx)(n.code,{children:"null"})," or ",(0,s.jsx)(n.code,{children:"false"}),"). Remember this null asserted form will throw if accessed when the condition is no longer true.",(0,s.jsx)(n.br,{}),"\n","\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c ",(0,s.jsx)(n.code,{children:"Show"})," \u7ec4\u4ef6\u7684\u7c7b\u578b\u8db3\u591f\u806a\u660e\uff0c\u53ef\u4ee5\u544a\u8bc9 TypeScript \u8fd9\u662f ",(0,s.jsx)(n.code,{children:"n"})," \u771f\u5b9e\u7684\uff0c\u6240\u4ee5\u5b83\u4e0d\u53ef\u80fd\u662f ",(0,s.jsx)(n.code,{children:"undefined"})," \uff08or or ",(0,s.jsx)(n.code,{children:"null"})," \uff09\u3002 ",(0,s.jsx)(n.code,{children:"false"})," \u8bf7\u8bb0\u4f4f\uff0c\u5f53\u6761\u4ef6\u4e0d\u518d\u4e3a\u771f\u65f6\uff0c\u5982\u679c\u8bbf\u95ee\u6b64 null \u65ad\u8a00\u8868\u5355\uff0c\u5c06\u629b\u51fa\u6b64\u8868\u5355\u3002"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"special-jsx-attributes-and-directives",children:"[Special JSX Attributes and Directives"}),"\n",(0,s.jsxs)(n.p,{children:["\u7279\u6b8a JSX \u5c5e\u6027\u548c\u6307\u4ee4]",(0,s.jsx)(n.a,{href:"https://docs.solidjs.com/guides/foundations/typescript-for-solid#special-jsx-attributes-and-directives",children:"30"})]}),"\n",(0,s.jsx)(n.h3,{id:"on___oncapture___",children:(0,s.jsxs)(n.a,{href:"https://docs.solidjs.com/guides/foundations/typescript-for-solid#on___oncapture___",children:[(0,s.jsx)(n.code,{children:"on:___"}),"/",(0,s.jsx)(n.code,{children:"oncapture:___"})]})}),"\n",(0,s.jsxs)(n.p,{children:["If you use custom event handlers via Solid's ",(0,s.jsxs)(n.a,{href:"https://www.solidjs.com/docs/latest/api#on%3A___%2Foncapture%3A___",children:[(0,s.jsx)(n.code,{children:"on:___"}),"/",(0,s.jsx)(n.code,{children:"oncapture:___"})," attributes"]}),", you should define corresponding types for the resulting ",(0,s.jsx)(n.code,{children:"Event"})," objects by overriding the ",(0,s.jsx)(n.code,{children:"CustomEvents"})," and ",(0,s.jsx)(n.code,{children:"CustomCaptureEvents"})," interfaces within module ",(0,s.jsx)(n.code,{children:'"solid-js"'}),"'s ",(0,s.jsx)(n.code,{children:"JSX"})," namespace, like so:",(0,s.jsx)(n.br,{}),"\n","\u5982\u679c\u901a\u8fc7 Solid ",(0,s.jsx)(n.code,{children:"on:___"})," \u7684 / ",(0,s.jsx)(n.code,{children:"oncapture:___"})," \u5c5e\u6027\u4f7f\u7528\u81ea\u5b9a\u4e49\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\uff0c\u5219\u5e94\u901a\u8fc7\u8986\u76d6\u6a21\u5757 ",(0,s.jsx)(n.code,{children:'"solid-js"'})," ",(0,s.jsx)(n.code,{children:"JSX"})," \u547d\u540d\u7a7a\u95f4\u4e2d\u7684 ",(0,s.jsx)(n.code,{children:"CustomEvents"})," and ",(0,s.jsx)(n.code,{children:"CustomCaptureEvents"})," \u63a5\u53e3\u6765\u4e3a\u751f\u6210\u7684 ",(0,s.jsx)(n.code,{children:"Event"})," \u5bf9\u8c61\u5b9a\u4e49\u76f8\u5e94\u7684\u7c7b\u578b\uff0c\u5982\u4e0b\u6240\u793a\uff1a"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'class NameEvent extends CustomEvent {    type: "Name";    detail: { name: string };    constructor(name: string) {      super("Name", { detail: { name } });    }  }  declare module "solid-js" {    namespace JSX {      interface CustomEvents {        // on:Name        Name: NameEvent;      }      interface CustomCaptureEvents {        // oncapture:Name        Name: NameEvent;      }    }  }  <div on:Name={(event) => console.log("name is", event.detail.name)} />;'})}),"\n",(0,s.jsx)(n.h3,{id:"prop___attr___",children:(0,s.jsxs)(n.a,{href:"https://docs.solidjs.com/guides/foundations/typescript-for-solid#prop___attr___",children:[(0,s.jsx)(n.code,{children:"prop:___"}),"/",(0,s.jsx)(n.code,{children:"attr:___"})]})}),"\n",(0,s.jsxs)(n.p,{children:["If you use forced properties via Solid's ",(0,s.jsxs)(n.a,{href:"https://www.solidjs.com/docs/latest/api#prop%3A___",children:[(0,s.jsx)(n.code,{children:"prop:___"})," attributes"]}),", or custom attributes via Solid's ",(0,s.jsxs)(n.a,{href:"https://www.solidjs.com/docs/latest/api#attr%3A___",children:[(0,s.jsx)(n.code,{children:"attr:___"})," attributes"]}),", you can define their types in the ",(0,s.jsx)(n.code,{children:"ExplicitProperties"})," and ",(0,s.jsx)(n.code,{children:"ExplicitAttributes"})," interfaces, respectively:",(0,s.jsx)(n.br,{}),"\n","\u5982\u679c\u901a\u8fc7 Solid ",(0,s.jsx)(n.code,{children:"prop:___"})," \u7684\u5c5e\u6027\u4f7f\u7528\u5f3a\u5236\u5c5e\u6027\uff0c\u6216\u901a\u8fc7 Solid ",(0,s.jsx)(n.code,{children:"attr:___"})," \u7684\u5c5e\u6027\u4f7f\u7528\u81ea\u5b9a\u4e49\u5c5e\u6027\uff0c\u5219\u53ef\u4ee5\u5206\u522b\u5728 ",(0,s.jsx)(n.code,{children:"ExplicitProperties"})," \u548c ",(0,s.jsx)(n.code,{children:"ExplicitAttributes"})," \u63a5\u53e3\u4e2d\u5b9a\u4e49\u5b83\u4eec\u7684\u7c7b\u578b\uff1a"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'declare module "solid-js" {    namespace JSX {      interface ExplicitProperties { // prop:___        count: number;        name: string;      }      interface ExplicitAttributes { // attr:___        count: number;        name: string;      }    }  }  <Input prop:name={name()} prop:count={count()}/>  <my-web-component attr:name={name()} attr:count={count()}/>'})}),"\n",(0,s.jsx)(n.h3,{id:"use___",children:(0,s.jsx)(n.a,{href:"https://docs.solidjs.com/guides/foundations/typescript-for-solid#use___",children:(0,s.jsx)(n.code,{children:"use:___"})})}),"\n",(0,s.jsxs)(n.p,{children:["If you define custom directives for Solid's ",(0,s.jsxs)(n.a,{href:"https://www.solidjs.com/docs/latest/api#use%3A___",children:[(0,s.jsx)(n.code,{children:"use:___"})," attributes"]}),", you can type them in the ",(0,s.jsx)(n.code,{children:"Directives"})," interface, like so:",(0,s.jsx)(n.br,{}),"\n","\u5982\u679c\u4e3a Solid ",(0,s.jsx)(n.code,{children:"use:___"})," \u7684\u5c5e\u6027\u5b9a\u4e49\u81ea\u5b9a\u4e49\u6307\u4ee4\uff0c\u5219\u53ef\u4ee5\u5728\u754c\u9762\u4e2d ",(0,s.jsx)(n.code,{children:"Directives"})," \u952e\u5165\u5b83\u4eec\uff0c\u5982\u4e0b\u6240\u793a\uff1a"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'function model(element: HTMLInputElement, value: Accessor<Signal<string>>) {    const [field, setField] = value();    createRenderEffect(() => (element.value = field()));    element.addEventListener("input", (e) => {      const value = (e.target as HTMLInputElement).value;      setField(value);    });  }  declare module "solid-js" {    namespace JSX {      interface Directives {        // use:model        model: Signal<string>;      }    }  }  let [name, setName] = createSignal("");  <input type="text" use:model={[name, setName]} />;'})}),"\n",(0,s.jsxs)(n.p,{children:["If you're importing a directive ",(0,s.jsx)(n.code,{children:"d"})," from another file/module, and ",(0,s.jsx)(n.code,{children:"d"})," is used only as a directive ",(0,s.jsx)(n.code,{children:"use:d"}),", then TypeScript (or more precisely, ",(0,s.jsx)(n.a,{href:"https://babeljs.io/docs/en/babel-preset-typescript",children:(0,s.jsx)(n.code,{children:"babel-preset-typescript"})}),") will by default remove the ",(0,s.jsx)(n.code,{children:"import"})," of ",(0,s.jsx)(n.code,{children:"d"})," (for fear that ",(0,s.jsx)(n.code,{children:"d"})," is a type, as TypeScript doesn't understand ",(0,s.jsx)(n.code,{children:"use:d"})," as a reference to ",(0,s.jsx)(n.code,{children:"d"}),"). There are two ways around this issue:",(0,s.jsx)(n.br,{}),"\n","\u5982\u679c\u60a8 ",(0,s.jsx)(n.code,{children:"d"})," \u4ece\u53e6\u4e00\u4e2a\u6587\u4ef6/\u6a21\u5757\u5bfc\u5165\u6307\u4ee4\uff0c\u5e76\u4e14 ",(0,s.jsx)(n.code,{children:"d"})," \u4ec5\u7528\u4f5c\u6307\u4ee4 ",(0,s.jsx)(n.code,{children:"use:d"})," \uff0c\u5219 TypeScript\uff08\u6216\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\uff09\u5c06\u9ed8\u8ba4\u5220\u9664 ",(0,s.jsx)(n.code,{children:"import"})," of ",(0,s.jsx)(n.code,{children:"d"})," \uff08\u56e0\u4e3a\u62c5\u5fc3\u8fd9\u662f\u4e00\u4e2a ",(0,s.jsx)(n.code,{children:"d"})," \u7c7b\u578b\uff0c ",(0,s.jsx)(n.code,{children:"babel-preset-typescript"})," \u56e0\u4e3a TypeScript \u4e0d\u7406\u89e3 ",(0,s.jsx)(n.code,{children:"use:d"})," \u4e3a\u5bf9 \u7684 ",(0,s.jsx)(n.code,{children:"d"})," \u5f15\u7528\uff09\u3002\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u6b64\u95ee\u9898\uff1a"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsxs)(n.a,{href:"https://babeljs.io/docs/en/babel-preset-typescript#onlyremovetypeimports",children:[(0,s.jsx)(n.code,{children:"babel-preset-typescript"}),"'s ",(0,s.jsx)(n.code,{children:"onlyRemoveTypeImports: true"})]})," configuration option, which prevents it from removing any imports except for ",(0,s.jsx)(n.code,{children:"import type ..."}),". If you're using ",(0,s.jsx)(n.code,{children:"vite-plugin-solid"}),", you can specify this option via ",(0,s.jsx)(n.code,{children:"solidPlugin({ typescript: { onlyRemoveTypeImports: true } })"})," in ",(0,s.jsx)(n.code,{children:"vite.config.ts"}),".",(0,s.jsx)(n.br,{}),"\n","\u4f7f\u7528 ",(0,s.jsx)(n.code,{children:"babel-preset-typescript"})," \u7684 ",(0,s.jsx)(n.code,{children:"onlyRemoveTypeImports: true"})," \u914d\u7f6e\u9009\u9879\uff0c\u8be5\u9009\u9879\u53ef\u9632\u6b62\u5b83\u5220\u9664\u9664 . ",(0,s.jsx)(n.code,{children:"import type ..."})," \u5982\u679c\u60a8\u4f7f\u7528\u7684 ",(0,s.jsx)(n.code,{children:"vite-plugin-solid"})," \u662f \uff0c\u5219\u53ef\u4ee5\u901a\u8fc7 ",(0,s.jsx)(n.code,{children:"solidPlugin({ typescript: { onlyRemoveTypeImports: true } })"})," \u4e2d\u7684 ",(0,s.jsx)(n.code,{children:"vite.config.ts"})," \u6307\u5b9a\u6b64\u9009\u9879\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["Note that this option can be problematic if you don't vigilantly use ",(0,s.jsx)(n.code,{children:"export type"})," and ",(0,s.jsx)(n.code,{children:"import type"})," throughout your codebase.",(0,s.jsx)(n.br,{}),"\n","\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u60a8\u4e0d\u8b66\u60d5\u5730\u4f7f\u7528 ",(0,s.jsx)(n.code,{children:"export type"})," \u548c ",(0,s.jsx)(n.code,{children:"import type"})," \u6574\u4e2a\u4ee3\u7801\u5e93\uff0c\u6b64\u9009\u9879\u53ef\u80fd\u4f1a\u6709\u95ee\u9898\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Add a fake access like ",(0,s.jsx)(n.code,{children:"false && d;"})," to every module importing directive ",(0,s.jsx)(n.code,{children:"d"}),". This will stop TypeScript from removing the ",(0,s.jsx)(n.code,{children:"import"})," of ",(0,s.jsx)(n.code,{children:"d"}),", and assuming you're tree-shaking via e.g. ",(0,s.jsx)(n.a,{href:"https://terser.org/",children:"Terser"}),", this code will be omitted from your final code bundle.",(0,s.jsx)(n.br,{}),"\n","\u4e3a\u6bcf\u4e2a\u6a21\u5757\u6dfb\u52a0\u4e00\u4e2a\u5047\u8bbf\u95ee ",(0,s.jsx)(n.code,{children:"false && d;"})," \u5bfc\u5165\u6307\u4ee4 ",(0,s.jsx)(n.code,{children:"d"})," \u3002\u8fd9\u5c06\u963b\u6b62 TypeScript \u5220\u9664 ",(0,s.jsx)(n.code,{children:"import"})," \u7684 ",(0,s.jsx)(n.code,{children:"d"})," \uff0c\u5e76\u4e14\u5047\u8bbe\u60a8\u6b63\u5728\u901a\u8fc7 Terser \u7b49\u6447\u6811\uff0c\u5219\u6b64\u4ee3\u7801\u5c06\u4ece\u60a8\u7684\u6700\u7ec8\u4ee3\u7801\u5305\u4e2d\u7701\u7565\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["The simpler fake access ",(0,s.jsx)(n.code,{children:"d;"})," will also prevent the ",(0,s.jsx)(n.code,{children:"import"})," from being removed, but will typically not be tree-shaken away, so will end up in your final code bundle.",(0,s.jsx)(n.br,{}),"\n","\u66f4\u7b80\u5355\u7684\u865a\u5047\u8bbf\u95ee ",(0,s.jsx)(n.code,{children:"d;"})," \u4e5f\u5c06\u963b\u6b62\u88ab\u5220\u9664\uff0c\u4f46\u901a\u5e38\u4e0d\u4f1a\u88ab ",(0,s.jsx)(n.code,{children:"import"})," \u64bc\u52a8\uff0c\u56e0\u6b64\u6700\u7ec8\u4f1a\u51fa\u73b0\u5728\u60a8\u7684\u6700\u7ec8\u4ee3\u7801\u5305\u4e2d\u3002"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},11151:function(e,n,t){t.d(n,{Z:function(){return d},a:function(){return i}});var s=t(67294);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);