"use strict";(self.webpackChunkany_doc=self.webpackChunkany_doc||[]).push([[8008],{1852:function(e,n,s){s.r(n),s.d(n,{assets:function(){return c},contentTitle:function(){return r},default:function(){return h},frontMatter:function(){return t},metadata:function(){return l},toc:function(){return o}});var i=s(11527),a=s(47214);const t={last_update:{date:1702174266022}},r="\u53d8\u91cf",l={id:"codeing/dart-tutorials/variables",title:"\u53d8\u91cf",description:"Here\u2019s an example of creating a variable and initializing it:",source:"@site/docs/09-codeing/13-dart-tutorials/01-variables.md",sourceDirName:"09-codeing/13-dart-tutorials",slug:"/codeing/dart-tutorials/variables",permalink:"/codeing/dart-tutorials/variables",draft:!1,unlisted:!1,editUrl:"https://github.com/share121/share121.github.io/edit/main/docs/09-codeing/13-dart-tutorials/01-variables.md",tags:[],version:"current",lastUpdatedBy:"share121",lastUpdatedAt:1702174266.022,formattedLastUpdatedAt:"2023\u5e7412\u670810\u65e5",sidebarPosition:1,frontMatter:{last_update:{date:1702174266022}},sidebar:"tutorialSidebar",previous:{title:"Dart \u7b80\u4ecb",permalink:"/codeing/dart-tutorials/"},next:{title:"\u8fd0\u7b97\u7b26",permalink:"/codeing/dart-tutorials/operators"}},c={},o=[{value:"Null safety \u96f6\u5b89\u5168",id:"null-safety-\u96f6\u5b89\u5168",level:2},{value:"Default value \u9ed8\u8ba4\u503c",id:"default-value-\u9ed8\u8ba4\u503c",level:2},{value:"Late variables \u540e\u671f\u53d8\u91cf",id:"late-variables-\u540e\u671f\u53d8\u91cf",level:2},{value:"Final and const Final \u548c const",id:"final-and-const-final-\u548c-const",level:2}];function d(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"\u53d8\u91cf",children:"\u53d8\u91cf"}),"\n",(0,i.jsxs)(n.p,{children:["Here\u2019s an example of creating a variable and initializing it:",(0,i.jsx)(n.br,{}),"\n","\u4e0b\u9762\u662f\u521b\u5efa\u53d8\u91cf\u5e76\u521d\u59cb\u5316\u5b83\u7684\u793a\u4f8b\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"var name = 'Bob';\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Variables store references. The variable called ",(0,i.jsx)(n.code,{children:"name"})," contains a reference to a ",(0,i.jsx)(n.code,{children:"String"})," object with a value of \u201cBob\u201d.",(0,i.jsx)(n.br,{}),"\n","\u53d8\u91cf\u5b58\u50a8\u5f15\u7528\u3002\u8c03\u7528 ",(0,i.jsx)(n.code,{children:"name"})," \u7684\u53d8\u91cf\u5305\u542b\u5bf9\u503c\u4e3a\u201cBob\u201d\u7684 ",(0,i.jsx)(n.code,{children:"String"})," \u5bf9\u8c61\u7684\u5f15\u7528\u3002"]}),"\n",(0,i.jsxs)(n.p,{children:["The type of the ",(0,i.jsx)(n.code,{children:"name"})," variable is inferred to be ",(0,i.jsx)(n.code,{children:"String"}),", but you can change that type by specifying it. If an object isn\u2019t restricted to a single type, specify the ",(0,i.jsx)(n.code,{children:"Object"})," type (or ",(0,i.jsx)(n.code,{children:"dynamic"})," if necessary).",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.code,{children:"name"})," \u53d8\u91cf\u7684\u7c7b\u578b\u88ab\u63a8\u65ad\u4e3a ",(0,i.jsx)(n.code,{children:"String"})," \uff0c\u4f46\u60a8\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u5b83\u6765\u66f4\u6539\u8be5\u7c7b\u578b\u3002\u5982\u679c\u5bf9\u8c61\u4e0d\u9650\u4e8e\u5355\u4e2a\u7c7b\u578b\uff0c\u8bf7\u6307\u5b9a ",(0,i.jsx)(n.code,{children:"Object"})," \u7c7b\u578b\uff08\u6216 ",(0,i.jsx)(n.code,{children:"dynamic"})," \u5982\u6709\u5fc5\u8981\uff09\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Object name = 'Bob';\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Another option is to explicitly declare the type that would be inferred:",(0,i.jsx)(n.br,{}),"\n","\u53e6\u4e00\u79cd\u9009\u62e9\u662f\u663e\u5f0f\u58f0\u660e\u8981\u63a8\u65ad\u7684\u7c7b\u578b\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"String name = 'Bob';\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["This page follows the ",(0,i.jsx)(n.a,{href:"https://dart.dev/effective-dart/design#types",children:"style guide recommendation"})," of using ",(0,i.jsx)(n.code,{children:"var"}),", rather than type annotations, for local variables.",(0,i.jsx)(n.br,{}),"\n","\u672c\u9875\u9075\u5faa\u6837\u5f0f\u6307\u5357\u5efa\u8bae\uff0c\u5373\u5bf9\u5c40\u90e8\u53d8\u91cf\u4f7f\u7528 ",(0,i.jsx)(n.code,{children:"var"})," \uff0c\u800c\u4e0d\u662f\u7c7b\u578b\u6ce8\u91ca\u3002"]})}),"\n",(0,i.jsx)(n.h2,{id:"null-safety-\u96f6\u5b89\u5168",children:"Null safety \u96f6\u5b89\u5168"}),"\n",(0,i.jsxs)(n.p,{children:["The Dart language enforces sound null safety.",(0,i.jsx)(n.br,{}),"\n","Dart \u8bed\u8a00\u5f3a\u5236\u6267\u884c\u58f0\u97f3\u96f6\u5b89\u5168\u3002"]}),"\n",(0,i.jsxs)(n.p,{children:["Null safety prevents an error that results from unintentional access of variables set to ",(0,i.jsx)(n.code,{children:"null"}),". The error is called a null dereference error. A null dereference error occurs when you access a property or call a method on an expression that evaluates to ",(0,i.jsx)(n.code,{children:"null"}),". An exception to this rule is when ",(0,i.jsx)(n.code,{children:"null"})," supports the property or method, like ",(0,i.jsx)(n.code,{children:"toString()"})," or ",(0,i.jsx)(n.code,{children:"hashCode"}),". With null safety, the Dart compiler detects these potential errors at compile time.",(0,i.jsx)(n.br,{}),"\n","\u7a7a\u5b89\u5168\u53ef\u9632\u6b62\u56e0\u65e0\u610f\u4e2d\u8bbf\u95ee\u8bbe\u7f6e\u4e3a \u7684\u53d8\u91cf\u800c\u5bfc\u81f4 ",(0,i.jsx)(n.code,{children:"null"})," \u7684\u9519\u8bef\u3002\u8be5\u9519\u8bef\u79f0\u4e3a null \u53d6\u6d88\u5f15\u7528\u9519\u8bef\u3002\u5f53\u60a8\u8bbf\u95ee\u5c5e\u6027\u6216\u5bf9\u8ba1\u7b97\u7ed3\u679c\u4e3a \u7684 ",(0,i.jsx)(n.code,{children:"null"})," \u8868\u8fbe\u5f0f\u8c03\u7528\u65b9\u6cd5\u65f6\uff0c\u4f1a\u53d1\u751f null \u53d6\u6d88\u5f15\u7528\u9519\u8bef\u3002\u6b64\u89c4\u5219\u7684\u4e00\u4e2a\u4f8b\u5916\u60c5\u51b5\u662f\uff0c\u5f53\u652f\u6301\u5c5e\u6027\u6216\u65b9\u6cd5\u65f6 ",(0,i.jsx)(n.code,{children:"null"})," \uff0c\u4f8b\u5982 ",(0,i.jsx)(n.code,{children:"toString()"})," \u6216 ",(0,i.jsx)(n.code,{children:"hashCode"})," \u3002\u5728\u7a7a\u5b89\u5168\u7684\u60c5\u51b5\u4e0b\uff0cDart \u7f16\u8bd1\u5668\u4f1a\u5728\u7f16\u8bd1\u65f6\u68c0\u6d4b\u5230\u8fd9\u4e9b\u6f5c\u5728\u7684\u9519\u8bef\u3002"]}),"\n",(0,i.jsxs)(n.p,{children:["For example, say you want to find the absolute value of an ",(0,i.jsx)(n.code,{children:"int"})," variable ",(0,i.jsx)(n.code,{children:"i"}),". If ",(0,i.jsx)(n.code,{children:"i"})," is ",(0,i.jsx)(n.code,{children:"null"}),", calling ",(0,i.jsx)(n.code,{children:"i.abs()"})," causes a null dereference error. In other languages, trying this could lead to a runtime error, but Dart\u2019s compiler prohibits these actions. Therefore, Dart apps can\u2019t cause runtime errors.",(0,i.jsx)(n.br,{}),"\n","\u4f8b\u5982\uff0c\u5047\u8bbe\u60a8\u8981\u67e5\u627e\u53d8\u91cf ",(0,i.jsx)(n.code,{children:"int"})," ",(0,i.jsx)(n.code,{children:"i"})," \u7684\u7edd\u5bf9\u503c\u3002\u5982\u679c ",(0,i.jsx)(n.code,{children:"i"})," \u662f ",(0,i.jsx)(n.code,{children:"null"})," \uff0c\u5219\u8c03\u7528 ",(0,i.jsx)(n.code,{children:"i.abs()"})," \u4f1a\u5bfc\u81f4 null \u53d6\u6d88\u5f15\u7528\u9519\u8bef\u3002\u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\uff0c\u5c1d\u8bd5\u8fd9\u6837\u505a\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u9519\u8bef\uff0c\u4f46 Dart \u7684\u7f16\u8bd1\u5668\u7981\u6b62\u8fd9\u4e9b\u64cd\u4f5c\u3002\u56e0\u6b64\uff0cDart \u5e94\u7528\u7a0b\u5e8f\u4e0d\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u9519\u8bef\u3002"]}),"\n",(0,i.jsxs)(n.p,{children:["Null safety introduces three key changes:",(0,i.jsx)(n.br,{}),"\n","Null \u5b89\u5168\u6027\u5f15\u5165\u4e86\u4e09\u4e2a\u5173\u952e\u66f4\u6539\uff1a"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["When you specify a type for a variable, parameter, or another relevant component, you can control whether the type allows ",(0,i.jsx)(n.code,{children:"null"}),". To enable nullability, you add a ",(0,i.jsx)(n.code,{children:"?"})," to the end of the type declaration.",(0,i.jsx)(n.br,{}),"\n","\u4e3a\u53d8\u91cf\u3001\u53c2\u6570\u6216\u5176\u4ed6\u76f8\u5173\u7ec4\u4ef6\u6307\u5b9a\u7c7b\u578b\u65f6\uff0c\u53ef\u4ee5\u63a7\u5236\u8be5\u7c7b\u578b\u662f\u5426\u5141\u8bb8 ",(0,i.jsx)(n.code,{children:"null"})," \u3002\u82e5\u8981\u542f\u7528\u53ef\u4e3a null \u6027\uff0c\u8bf7\u5728\u7c7b\u578b\u58f0\u660e\u7684\u672b\u5c3e\u6dfb\u52a0 a ",(0,i.jsx)(n.code,{children:"?"})," \u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"String? name  // Nullable type. Can be `null` or string.\n\nString name   // Non-nullable type. Cannot be `null` but can be string.\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["You must initialize variables before using them. Nullable variables default to ",(0,i.jsx)(n.code,{children:"null"}),", so they are initialized by default. Dart doesn\u2019t set initial values to non-nullable types. It forces you to set an initial value. Dart doesn\u2019t allow you to observe an uninitialized variable. This prevents you from accessing properties or calling methods where the receiver\u2019s type can be ",(0,i.jsx)(n.code,{children:"null"})," but ",(0,i.jsx)(n.code,{children:"null"})," doesn\u2019t support the method or property used.",(0,i.jsx)(n.br,{}),"\n","\u5728\u4f7f\u7528\u53d8\u91cf\u4e4b\u524d\uff0c\u5fc5\u987b\u521d\u59cb\u5316\u53d8\u91cf\u3002\u53ef\u4e3a null \u7684\u53d8\u91cf\u9ed8\u8ba4\u4e3a ",(0,i.jsx)(n.code,{children:"null"})," \uff0c\u56e0\u6b64\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u521d\u59cb\u5316\u5b83\u4eec\u3002Dart \u4e0d\u4f1a\u5c06\u521d\u59cb\u503c\u8bbe\u7f6e\u4e3a\u4e0d\u53ef\u4e3a null \u7684\u7c7b\u578b\u3002\u5b83\u5f3a\u5236\u60a8\u8bbe\u7f6e\u521d\u59cb\u503c\u3002Dart \u4e0d\u5141\u8bb8\u4f60\u89c2\u5bdf\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\u3002\u8fd9\u4f1a\u963b\u6b62\u60a8\u8bbf\u95ee\u5c5e\u6027\u6216\u8c03\u7528\u63a5\u6536\u5668\u7c7b\u578b\u53ef\u4ee5\u662f ",(0,i.jsx)(n.code,{children:"null"})," \u4f46 ",(0,i.jsx)(n.code,{children:"null"})," \u4e0d\u652f\u6301\u4f7f\u7528\u7684\u65b9\u6cd5\u6216\u5c5e\u6027\u7684\u65b9\u6cd5\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["You can\u2019t access properties or call methods on an expression with a nullable type. The same exception applies where it\u2019s a property or method that ",(0,i.jsx)(n.code,{children:"null"})," supports like ",(0,i.jsx)(n.code,{children:"hashCode"})," or ",(0,i.jsx)(n.code,{children:"toString()"}),".",(0,i.jsx)(n.br,{}),"\n","\u4e0d\u80fd\u8bbf\u95ee\u5c5e\u6027\u6216\u8c03\u7528\u5177\u6709\u53ef\u4e3a null \u7c7b\u578b\u7684\u8868\u8fbe\u5f0f\u7684\u65b9\u6cd5\u3002\u5982\u679c\u662f ",(0,i.jsx)(n.code,{children:"null"})," \u652f\u6301 like ",(0,i.jsx)(n.code,{children:"hashCode"})," \u6216 \u7684\u5c5e\u6027\u6216 ",(0,i.jsx)(n.code,{children:"toString()"})," \u65b9\u6cd5\uff0c\u5219\u76f8\u540c\u7684\u4f8b\u5916\u60c5\u51b5\u4e5f\u9002\u7528\u3002"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Sound null safety changes potential ",(0,i.jsx)(n.strong,{children:"runtime errors"})," into ",(0,i.jsx)(n.strong,{children:"edit-time"})," analysis errors. Null safety flags a non-null variable when it has been either:",(0,i.jsx)(n.br,{}),"\n","\u5065\u5168\u7684 null \u5b89\u5168\u6027\u5c06\u6f5c\u5728\u7684\u8fd0\u884c\u65f6\u9519\u8bef\u66f4\u6539\u4e3a\u7f16\u8f91\u65f6\u5206\u6790\u9519\u8bef\u3002\u5f53\u975e null \u53d8\u91cf\u51fa\u73b0\u4ee5\u4e0b\u4efb\u4e00\u60c5\u51b5\u65f6\uff0cNull \u5b89\u5168\u6807\u8bb0\u8be5\u53d8\u91cf\uff1a"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Not initialized with a non-null value.",(0,i.jsx)(n.br,{}),"\n","\u672a\u4f7f\u7528\u975e null \u503c\u8fdb\u884c\u521d\u59cb\u5316\u3002"]}),"\n",(0,i.jsxs)(n.li,{children:["Assigned a ",(0,i.jsx)(n.code,{children:"null"})," value.",(0,i.jsx)(n.br,{}),"\n","\u5df2\u5206\u914d\u503c ",(0,i.jsx)(n.code,{children:"null"})," \u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This check allows you to fix these errors ",(0,i.jsx)(n.em,{children:"before"})," deploying your app.",(0,i.jsx)(n.br,{}),"\n","\u901a\u8fc7\u6b64\u68c0\u67e5\uff0c\u53ef\u4ee5\u5728\u90e8\u7f72\u5e94\u7528\u4e4b\u524d\u4fee\u590d\u8fd9\u4e9b\u9519\u8bef\u3002"]}),"\n",(0,i.jsx)(n.h2,{id:"default-value-\u9ed8\u8ba4\u503c",children:"Default value \u9ed8\u8ba4\u503c"}),"\n",(0,i.jsxs)(n.p,{children:["Uninitialized variables that have a nullable type have an initial value of ",(0,i.jsx)(n.code,{children:"null"}),". Even variables with numeric types are initially null, because numbers\u2014like everything else in Dart\u2014are objects.",(0,i.jsx)(n.br,{}),"\n","\u5177\u6709\u53ef\u4e3a null \u7c7b\u578b\u7684\u672a\u521d\u59cb\u5316\u53d8\u91cf\u7684\u521d\u59cb\u503c\u4e3a ",(0,i.jsx)(n.code,{children:"null"})," \u3002\u5373\u4f7f\u662f\u5177\u6709\u6570\u503c\u7c7b\u578b\u7684\u53d8\u91cf\u6700\u521d\u4e5f\u662f\u7a7a\u7684\uff0c\u56e0\u4e3a\u6570\u5b57\uff08\u5c31\u50cf Dart \u4e2d\u7684\u5176\u4ed6\u6240\u6709\u5185\u5bb9\u4e00\u6837\uff09\u90fd\u662f\u5bf9\u8c61\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"int? lineCount;\nassert(lineCount == null);\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Production code ignores the ",(0,i.jsx)(n.code,{children:"assert()"})," call. During development, on the other hand, ",(0,i.jsx)(n.code,{children:"assert(_condition_)"})," throws an exception if ",(0,i.jsx)(n.em,{children:"condition"})," is false. For details, check out ",(0,i.jsx)(n.a,{href:"https://dart.dev/language/error-handling#assert",children:"Assert"}),".",(0,i.jsx)(n.br,{}),"\n","\u751f\u4ea7\u4ee3\u7801\u4f1a\u5ffd\u7565\u8c03\u7528 ",(0,i.jsx)(n.code,{children:"assert()"})," \u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c ",(0,i.jsx)(n.code,{children:"assert(_condition_)"})," \u5982\u679c\u6761\u4ef6\u4e3a false\uff0c\u5219\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u67e5\u770b Assert\u3002"]})}),"\n",(0,i.jsxs)(n.p,{children:["With null safety, you must initialize the values of non-nullable variables before you use them:",(0,i.jsx)(n.br,{}),"\n","\u4f7f\u7528 null \u5b89\u5168\u65f6\uff0c\u5fc5\u987b\u5148\u521d\u59cb\u5316\u4e0d\u53ef\u4e3a null \u7684\u53d8\u91cf\u7684\u503c\uff0c\u7136\u540e\u624d\u80fd\u4f7f\u7528\u5b83\u4eec\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"int lineCount = 0;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You don\u2019t have to initialize a local variable where it\u2019s declared, but you do need to assign it a value before it\u2019s used. For example, the following code is valid because Dart can detect that ",(0,i.jsx)(n.code,{children:"lineCount"})," is non-null by the time it\u2019s passed to ",(0,i.jsx)(n.code,{children:"print()"}),":",(0,i.jsx)(n.br,{}),"\n","\u60a8\u4e0d\u5fc5\u5728\u58f0\u660e\u5c40\u90e8\u53d8\u91cf\u7684\u4f4d\u7f6e\u5bf9\u5176\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u4f46\u9700\u8981\u5728\u4f7f\u7528\u4e4b\u524d\u4e3a\u5176\u5206\u914d\u4e00\u4e2a\u503c\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u4ee3\u7801\u662f\u6709\u6548\u7684\uff0c\u56e0\u4e3a Dart \u53ef\u4ee5\u5728\u4f20\u9012\u7ed9 ",(0,i.jsx)(n.code,{children:"print()"})," \u65f6\u68c0\u6d4b\u5230 ",(0,i.jsx)(n.code,{children:"lineCount"})," \u975e null\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"int lineCount;\n\nif (weLikeToCount) {\n  lineCount = countLines();\n} else {\n  lineCount = 0;\n}\n\nprint(lineCount);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Top-level and class variables are lazily initialized; the initialization code runs the first time the variable is used.",(0,i.jsx)(n.br,{}),"\n","\u9876\u7ea7\u53d8\u91cf\u548c\u7c7b\u53d8\u91cf\u5ef6\u8fdf\u521d\u59cb\u5316;\u521d\u59cb\u5316\u4ee3\u7801\u5728\u9996\u6b21\u4f7f\u7528\u53d8\u91cf\u65f6\u8fd0\u884c\u3002"]}),"\n",(0,i.jsx)(n.h2,{id:"late-variables-\u540e\u671f\u53d8\u91cf",children:"Late variables \u540e\u671f\u53d8\u91cf"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"late"})," modifier has two use cases:",(0,i.jsx)(n.br,{}),"\n","\u4fee ",(0,i.jsx)(n.code,{children:"late"})," \u9970\u7b26\u6709\u4e24\u4e2a\u7528\u4f8b\uff1a"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Declaring a non-nullable variable that\u2019s initialized after its declaration.",(0,i.jsx)(n.br,{}),"\n","\u58f0\u660e\u4e00\u4e2a\u4e0d\u53ef\u4e3a null \u7684\u53d8\u91cf\uff0c\u8be5\u53d8\u91cf\u5728\u5176\u58f0\u660e\u540e\u521d\u59cb\u5316\u3002"]}),"\n",(0,i.jsxs)(n.li,{children:["Lazily initializing a variable.",(0,i.jsx)(n.br,{}),"\n","\u5ef6\u8fdf\u521d\u59cb\u5316\u53d8\u91cf\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Often Dart\u2019s control flow analysis can detect when a non-nullable variable is set to a non-null value before it\u2019s used, but sometimes analysis fails. Two common cases are top-level variables and instance variables: Dart often can\u2019t determine whether they\u2019re set, so it doesn\u2019t try.",(0,i.jsx)(n.br,{}),"\n","\u901a\u5e38\uff0cDart \u7684\u63a7\u5236\u6d41\u5206\u6790\u53ef\u4ee5\u5728\u4f7f\u7528\u4e0d\u53ef\u4e3a null \u7684\u53d8\u91cf\u4e4b\u524d\u68c0\u6d4b\u8be5\u53d8\u91cf\u4f55\u65f6\u8bbe\u7f6e\u4e3a\u975e null \u503c\uff0c\u4f46\u6709\u65f6\u5206\u6790\u4f1a\u5931\u8d25\u3002\u4e24\u79cd\u5e38\u89c1\u7684\u60c5\u51b5\u662f\u9876\u7ea7\u53d8\u91cf\u548c\u5b9e\u4f8b\u53d8\u91cf\uff1a Dart \u901a\u5e38\u65e0\u6cd5\u786e\u5b9a\u5b83\u4eec\u662f\u5426\u88ab\u8bbe\u7f6e\uff0c\u56e0\u6b64\u5b83\u4e0d\u4f1a\u5c1d\u8bd5\u3002"]}),"\n",(0,i.jsxs)(n.p,{children:["If you\u2019re sure that a variable is set before it\u2019s used, but Dart disagrees, you can fix the error by marking the variable as ",(0,i.jsx)(n.code,{children:"late"}),":",(0,i.jsx)(n.br,{}),"\n","\u5982\u679c\u4f60\u786e\u5b9a\u4e00\u4e2a\u53d8\u91cf\u5728\u4f7f\u7528\u4e4b\u524d\u5df2\u7ecf\u8bbe\u7f6e\u597d\u4e86\uff0c\u4f46 Dart \u4e0d\u540c\u610f\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5c06\u53d8\u91cf\u6807\u8bb0\u4e3a ",(0,i.jsx)(n.code,{children:"late"})," \uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// highlight-next-line\nlate String description;\n\nvoid main() {\n  description = 'Feijoada!';\n  print(description);\n}\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["If you fail to initialize a ",(0,i.jsx)(n.code,{children:"late"})," variable, a runtime error occurs when the variable is used.",(0,i.jsx)(n.br,{}),"\n","\u5982\u679c ",(0,i.jsx)(n.code,{children:"late"})," \u521d\u59cb\u5316\u53d8\u91cf\u5931\u8d25\uff0c\u5219\u5728\u4f7f\u7528\u8be5\u53d8\u91cf\u65f6\u4f1a\u53d1\u751f\u8fd0\u884c\u65f6\u9519\u8bef\u3002"]})}),"\n",(0,i.jsxs)(n.p,{children:["When you mark a variable as ",(0,i.jsx)(n.code,{children:"late"})," but initialize it at its declaration, then the initializer runs the first time the variable is used. This lazy initialization is handy in a couple of cases:",(0,i.jsx)(n.br,{}),"\n","\u5982\u679c\u5c06\u53d8\u91cf\u6807\u8bb0\u4e3a \u4f46\u5728 ",(0,i.jsx)(n.code,{children:"late"})," \u58f0\u660e\u65f6\u5bf9\u5176\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5219\u521d\u59cb\u503c\u8bbe\u5b9a\u9879\u5c06\u5728\u9996\u6b21\u4f7f\u7528\u8be5\u53d8\u91cf\u65f6\u8fd0\u884c\u3002\u8fd9\u79cd\u5ef6\u8fdf\u521d\u59cb\u5316\u5728\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\u4e0b\u975e\u5e38\u65b9\u4fbf\uff1a"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The variable might not be needed, and initializing it is costly.",(0,i.jsx)(n.br,{}),"\n","\u8be5\u53d8\u91cf\u53ef\u80fd\u4e0d\u9700\u8981\uff0c\u5e76\u4e14\u521d\u59cb\u5316\u5b83\u7684\u6210\u672c\u5f88\u9ad8\u3002"]}),"\n",(0,i.jsxs)(n.li,{children:["You\u2019re initializing an instance variable, and its initializer needs access to ",(0,i.jsx)(n.code,{children:"this"}),".",(0,i.jsx)(n.br,{}),"\n","\u60a8\u6b63\u5728\u521d\u59cb\u5316\u5b9e\u4f8b\u53d8\u91cf\uff0c\u5176\u521d\u59cb\u503c\u8bbe\u5b9a\u9879\u9700\u8981\u8bbf\u95ee ",(0,i.jsx)(n.code,{children:"this"})," \u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["In the following example, if the ",(0,i.jsx)(n.code,{children:"temperature"})," variable is never used, then the expensive ",(0,i.jsx)(n.code,{children:"readThermometer()"})," function is never called:",(0,i.jsx)(n.br,{}),"\n","\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u5982\u679c\u4ece\u672a\u4f7f\u7528\u8fc7\u8be5 ",(0,i.jsx)(n.code,{children:"temperature"})," \u53d8\u91cf\uff0c\u5219\u6c38\u8fdc\u4e0d\u4f1a\u8c03\u7528\u5f00\u9500 ",(0,i.jsx)(n.code,{children:"readThermometer()"})," \u51fd\u6570\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// This is the program's only call to readThermometer().\n// highlight-next-line\nlate String temperature = readThermometer(); // Lazily initialized.\n"})}),"\n",(0,i.jsx)(n.h2,{id:"final-and-const-final-\u548c-const",children:"Final and const Final \u548c const"}),"\n",(0,i.jsxs)(n.p,{children:["If you never intend to change a variable, use ",(0,i.jsx)(n.code,{children:"final"})," or ",(0,i.jsx)(n.code,{children:"const"}),", either instead of ",(0,i.jsx)(n.code,{children:"var"})," or in addition to a type. A final variable can be set only once; a const variable is a compile-time constant. (Const variables are implicitly final.)",(0,i.jsx)(n.br,{}),"\n","\u5982\u679c\u60a8\u4ece\u4e0d\u6253\u7b97\u66f4\u6539\u53d8\u91cf\uff0c\u8bf7\u4f7f\u7528 ",(0,i.jsx)(n.code,{children:"final"})," \u6216 ",(0,i.jsx)(n.code,{children:"const"})," \u4ee3\u66ff\u7c7b\u578b ",(0,i.jsx)(n.code,{children:"var"})," \u6216\u8865\u5145\u7c7b\u578b\u3002\u6700\u540e\u4e00\u4e2a\u53d8\u91cf\u53ea\u80fd\u8bbe\u7f6e\u4e00\u6b21;const \u53d8\u91cf\u662f\u7f16\u8bd1\u65f6\u5e38\u91cf\u3002\uff08Const \u53d8\u91cf\u662f\u9690\u5f0f final\u3002"]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://dart.dev/language/classes#instance-variables",children:"Instance variables"})," can be ",(0,i.jsx)(n.code,{children:"final"})," but not ",(0,i.jsx)(n.code,{children:"const"}),".",(0,i.jsx)(n.br,{}),"\n","\u5b9e\u4f8b\u53d8\u91cf\u53ef\u4ee5\u662f ",(0,i.jsx)(n.code,{children:"final"})," \uff0c\u4f46\u4e0d\u80fd ",(0,i.jsx)(n.code,{children:"const"})," \u3002"]})}),"\n",(0,i.jsxs)(n.p,{children:["Here\u2019s an example of creating and setting a ",(0,i.jsx)(n.code,{children:"final"})," variable:",(0,i.jsx)(n.br,{}),"\n","\u4e0b\u9762\u662f\u521b\u5efa\u548c\u8bbe\u7f6e ",(0,i.jsx)(n.code,{children:"final"})," \u53d8\u91cf\u7684\u793a\u4f8b\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final name = 'Bob'; // Without a type annotation\nfinal String nickname = 'Bobby';\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can\u2019t change the value of a ",(0,i.jsx)(n.code,{children:"final"})," variable:",(0,i.jsx)(n.br,{}),"\n","\u60a8\u65e0\u6cd5\u66f4\u6539 ",(0,i.jsx)(n.code,{children:"final"})," \u53d8\u91cf\u7684\u503c\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// error-next-line\nname = 'Alice'; // Error: a final variable can only be set once.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"const"})," for variables that you want to be ",(0,i.jsx)(n.strong,{children:"compile-time constants"}),". If the const variable is at the class level, mark it ",(0,i.jsx)(n.code,{children:"static const"}),". Where you declare the variable, set the value to a compile-time constant such as a number or string literal, a const variable, or the result of an arithmetic operation on constant numbers:",(0,i.jsx)(n.br,{}),"\n","\u7528\u4e8e ",(0,i.jsx)(n.code,{children:"const"})," \u8981\u4f5c\u4e3a\u7f16\u8bd1\u65f6\u5e38\u91cf\u7684\u53d8\u91cf\u3002\u5982\u679c const \u53d8\u91cf\u5904\u4e8e\u7c7b\u7ea7\u522b\uff0c\u8bf7\u5c06\u5176 ",(0,i.jsx)(n.code,{children:"static const"})," \u6807\u8bb0\u4e3a \u3002\u5728\u58f0\u660e\u53d8\u91cf\u65f6\uff0c\u5c06\u503c\u8bbe\u7f6e\u4e3a\u7f16\u8bd1\u65f6\u5e38\u91cf\uff0c\u4f8b\u5982\u6570\u5b57\u6216\u5b57\u7b26\u4e32\u6587\u672c\u3001const \u53d8\u91cf\u6216\u5e38\u91cf\u6570\u7684\u7b97\u672f\u8fd0\u7b97\u7ed3\u679c\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"const bar = 1000000; // Unit of pressure (dynes/cm2)\nconst double atm = 1.01325 * bar; // Standard atmosphere\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"const"})," keyword isn\u2019t just for declaring constant variables. You can also use it to create constant ",(0,i.jsx)(n.em,{children:"values"}),", as well as to declare constructors that ",(0,i.jsx)(n.em,{children:"create"})," constant values. Any variable can have a constant value.",(0,i.jsx)(n.br,{}),"\n","\u8be5 ",(0,i.jsx)(n.code,{children:"const"})," \u5173\u952e\u5b57\u4e0d\u4ec5\u7528\u4e8e\u58f0\u660e\u5e38\u91cf\u53d8\u91cf\u3002\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u521b\u5efa\u5e38\u91cf\u503c\uff0c\u4ee5\u53ca\u58f0\u660e\u521b\u5efa\u5e38\u91cf\u503c\u7684\u6784\u9020\u51fd\u6570\u3002\u4efb\u4f55\u53d8\u91cf\u90fd\u53ef\u4ee5\u5177\u6709\u5e38\u91cf\u503c\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"var foo = const [];\nfinal bar = const [];\nconst baz = []; // Equivalent to `const []`\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can omit ",(0,i.jsx)(n.code,{children:"const"})," from the initializing expression of a ",(0,i.jsx)(n.code,{children:"const"})," declaration, like for ",(0,i.jsx)(n.code,{children:"baz"})," above. For details, see ",(0,i.jsx)(n.a,{href:"https://dart.dev/effective-dart/usage#dont-use-const-redundantly",children:"DON\u2019T use const redundantly"}),".",(0,i.jsx)(n.br,{}),"\n","\u60a8\u53ef\u4ee5\u4ece ",(0,i.jsx)(n.code,{children:"const"})," \u58f0\u660e\u7684\u521d\u59cb\u5316\u8868\u8fbe\u5f0f\u4e2d\u7701\u7565\uff0c ",(0,i.jsx)(n.code,{children:"const"})," \u5982\u4e0a\u6240\u8ff0 ",(0,i.jsx)(n.code,{children:"baz"})," \u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u4e0d\u8981\u5197\u4f59\u5730\u4f7f\u7528 const\u3002"]}),"\n",(0,i.jsxs)(n.p,{children:["You can change the value of a non-final, non-const variable, even if it used to have a ",(0,i.jsx)(n.code,{children:"const"})," value:",(0,i.jsx)(n.br,{}),"\n","\u60a8\u53ef\u4ee5\u66f4\u6539\u975e\u6700\u7ec8\u3001\u975e\u5e38\u91cf\u53d8\u91cf\u7684\u503c\uff0c\u5373\u4f7f\u5b83\u66fe\u7ecf\u6709\u4e00\u4e2a ",(0,i.jsx)(n.code,{children:"const"})," \u503c\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"foo = [1, 2, 3]; // Was const []\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can\u2019t change the value of a ",(0,i.jsx)(n.code,{children:"const"})," variable:",(0,i.jsx)(n.br,{}),"\n","\u60a8\u65e0\u6cd5\u66f4\u6539 ",(0,i.jsx)(n.code,{children:"const"})," \u53d8\u91cf\u7684\u503c\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// error-next-line\nbaz = [42]; // Error: Constant variables can't be assigned a value.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can define constants that use ",(0,i.jsx)(n.a,{href:"https://dart.dev/language/operators#type-test-operators",children:"type checks and casts"})," (",(0,i.jsx)(n.code,{children:"is"})," and ",(0,i.jsx)(n.code,{children:"as"}),"), ",(0,i.jsxs)(n.a,{href:"https://dart.dev/language/collections#control-flow-operators",children:["collection ",(0,i.jsx)(n.code,{children:"if"})]}),", and ",(0,i.jsx)(n.a,{href:"https://dart.dev/language/collections#spread-operators",children:"spread operators"})," (",(0,i.jsx)(n.code,{children:"..."})," and ",(0,i.jsx)(n.code,{children:"...?"}),"):",(0,i.jsx)(n.br,{}),"\n","\u60a8\u53ef\u4ee5\u5b9a\u4e49\u4f7f\u7528\u7c7b\u578b\u68c0\u67e5\u548c\u5f3a\u5236\u8f6c\u6362 \uff08 \u548c \uff09\u3001\u96c6\u5408 ",(0,i.jsx)(n.code,{children:"if"})," \u548c\u6269\u5c55\u8fd0\u7b97\u7b26 \uff08 ",(0,i.jsx)(n.code,{children:"..."})," ",(0,i.jsx)(n.code,{children:"is"})," \u548c ",(0,i.jsx)(n.code,{children:"as"})," ",(0,i.jsx)(n.code,{children:"...?"})," \uff09 \u7684\u5e38\u91cf\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"const Object i = 3; // Where i is a const Object with an int value...\nconst list = [i as int]; // Use a typecast.\nconst map = {if (i is int) i: 'int'}; // Use is and collection if.\nconst set = {if (list is List<int>) ...list}; // ...and a spread.\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Although a ",(0,i.jsx)(n.code,{children:"final"})," object cannot be modified, its fields can be changed. In comparison, a ",(0,i.jsx)(n.code,{children:"const"})," object and its fields cannot be changed: they\u2019re ",(0,i.jsx)(n.em,{children:"immutable"}),".",(0,i.jsx)(n.br,{}),"\n","\u867d\u7136 ",(0,i.jsx)(n.code,{children:"final"})," \u65e0\u6cd5\u4fee\u6539\u5bf9\u8c61\uff0c\u4f46\u53ef\u4ee5\u66f4\u6539\u5176\u5b57\u6bb5\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c ",(0,i.jsx)(n.code,{children:"const"})," \u5bf9\u8c61\u53ca\u5176\u5b57\u6bb5\u662f\u65e0\u6cd5\u66f4\u6539\u7684\uff1a\u5b83\u4eec\u662f\u4e0d\u53ef\u53d8\u7684\u3002"]})}),"\n",(0,i.jsxs)(n.p,{children:["For more information on using ",(0,i.jsx)(n.code,{children:"const"})," to create constant values, see ",(0,i.jsx)(n.a,{href:"https://dart.dev/language/collections#lists",children:"Lists"}),", ",(0,i.jsx)(n.a,{href:"https://dart.dev/language/collections#maps",children:"Maps"}),", and ",(0,i.jsx)(n.a,{href:"https://dart.dev/language/classes",children:"Classes"}),".",(0,i.jsx)(n.br,{}),"\n","\u6709\u5173\u7528\u4e8e ",(0,i.jsx)(n.code,{children:"const"})," \u521b\u5efa\u5e38\u91cf\u503c\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u5217\u8868\u3001\u6620\u5c04\u548c\u7c7b\u3002"]})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},47214:function(e,n,s){s.d(n,{Z:function(){return l},a:function(){return r}});var i=s(50959);const a={},t=i.createContext(a);function r(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);